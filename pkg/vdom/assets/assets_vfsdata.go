// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 7, 23, 7, 53, 417874973, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 7, 22, 40, 36, 343782482, time.UTC),
			uncompressedSize: 4701,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x5d\x8f\x9b\x38\x17\xbe\x9f\x5f\x71\xca\x15\x51\x23\xc8\xdb\xbe\xbb\xaa\x92\x50\x69\xdb\xad\xb6\x5d\x75\x67\x57\xcd\xa8\xdd\x6a\x94\x0b\x0f\x9c\x80\x3b\xc4\x20\xdb\x49\x26\xaa\xf2\xdf\x57\xc6\x0e\xd8\x06\x66\x32\x57\x09\x3e\x9f\x7e\xce\x73\xec\x03\xcb\x42\x6e\xcb\xb7\x57\x00\xcb\x02\x49\xa6\xfe\x00\x2c\x45\xca\x69\x2d\x41\x1e\x6b\x4c\x02\x89\x0f\x32\xfe\x41\xf6\x44\xaf\x06\x5a\x07\x60\x4f\x38\x88\x2a\xbd\x47\xb9\xb8\x32\x4b\x9b\x1d\x4b\x25\xad\x18\x70\xcc\xa9\x90\xc8\x3f\xec\x91\xc9\x8f\x84\x65\x25\xf2\x90\x55\x19\x4e\x1b\xa7\x53\xa0\xd9\x04\x7e\x1a\x2b\x00\x25\x89\x48\x96\x35\xea\x9f\x95\x25\x43\x1e\x6a\xcd\xb3\xcf\x10\xf7\xd2\xb6\x01\x28\x51\x02\x2a\x8b\xdf\x89\x24\x90\x40\x10\x2c\x2c\xa9\x38\x50\x99\x16\xd0\x78\x71\xed\x00\x52\x22\x10\x82\xb4\x20\x2c\xc7\x60\xee\x88\xc0\x71\xf9\x13\xbe\x92\x72\x87\x73\xc0\xbd\x8c\x24\xe1\x39\xca\x68\xaf\x56\xe0\xb4\xf0\xcc\xee\x38\x92\xfb\xc5\x50\x98\x92\xa6\xf7\x5e\x14\x2d\xd9\x56\x3b\x81\x59\x75\x60\xe3\xd2\x5d\x3d\x2e\x43\x26\x91\x8f\x8b\x4b\x24\x7b\x7f\x77\x96\x78\x5b\xf5\xa4\xde\xde\x3d\x19\xc0\xbb\x9d\x94\x15\x13\x1a\x8d\x3b\xfd\x30\xed\x69\xbd\x2f\x29\x32\xf9\xaf\xd6\x4a\xf5\xc3\x98\xd6\x77\x5b\xeb\xbb\xa7\xf4\x34\xc4\xa7\x2b\x8f\x0e\x59\xb5\x6d\x38\xd4\x4b\xff\xe6\x58\xe3\x5c\x73\xcf\x59\xff\x50\xe2\x16\x99\xfc\x94\xcd\x81\x66\xae\x48\xc1\x30\xef\x10\xb9\x1a\x49\x2c\xad\x98\xa8\x4a\x8c\xca\x2a\x0f\xcf\xe1\x27\x0e\x11\x9b\x1e\x89\x04\xb2\x2c\xfc\x73\xf5\xf7\x75\x24\x24\xa7\x2c\xa7\x9b\x63\xa7\x6f\x19\x9c\xda\xff\xa7\x5e\x5b\xa5\x1c\x89\x44\x93\xf3\x17\x4c\x77\x5c\xd0\x3d\x86\x62\x9f\x5f\x93\x2d\x8a\x9a\xa4\x38\x05\xd4\x62\x9b\xf3\x0a\x1a\xd5\x63\x90\x00\xdb\x95\x65\x17\x8c\x6e\xc0\xb1\x76\x1b\xc5\x98\x64\x55\xba\x53\x1e\x23\x27\xfc\xf5\x2a\x74\xe0\x0a\x0a\x29\xeb\x79\x1c\x1f\x0e\x87\xe8\xf0\x3a\xaa\x78\x1e\xbf\x9a\xcd\x66\xb1\xd8\xe7\x81\x0b\xac\x49\x30\x52\x51\x2d\x81\x8d\x01\x60\x29\xf0\xf2\x5c\x42\xdb\xa5\xed\xa7\xe3\xc7\xa6\xe2\x10\xaa\x23\x8b\x91\x2d\x02\x65\x6d\x16\xbf\x49\xc9\x45\x7f\xdf\x91\x40\xa9\x44\xf4\x6e\x27\x31\x54\x46\x53\xd7\xe4\x56\xad\xad\x9f\x08\x46\x21\x81\xd9\x02\x28\x2c\x5b\xe3\xf7\x05\x2d\x33\x8e\x2c\x2a\x91\xe5\xb2\x58\x00\x7d\xf9\xd2\x0d\xaf\x8a\xe2\x6b\xdf\xd2\x75\xa4\x38\x0c\x49\x02\xaf\xfd\xe3\xac\xc9\x97\x32\x86\xfc\x06\x1f\x14\xf7\x87\xac\x75\xd2\x81\xd2\x08\xd6\x4e\x13\xf5\xc1\x06\x48\x95\x25\x24\xcf\x62\x9c\x1d\x6e\xb2\xe8\x67\x48\xea\x1a\x59\xd6\x28\x85\x8d\xff\x89\xdb\xcb\xcf\x04\xd2\xbe\x5b\xc4\x38\x9a\x83\x57\x51\x2f\xb9\x61\x86\x3a\x21\xce\x25\x18\x56\x35\xf0\xd2\x2c\x58\x8f\x70\xba\xdb\x15\x47\xb9\xe3\xac\x89\x3b\xde\xeb\x39\x4a\x03\xfb\xbb\xe3\x3f\x44\x16\x61\x4d\x64\xe1\x37\xb5\x89\xde\xf6\x75\x2b\x8c\x63\xe5\x00\x78\x55\x75\x4a\x74\x03\x54\x02\x3e\x50\x21\xc5\x14\xf0\x21\x2d\x77\x19\x65\x39\x10\x76\x04\xca\x7e\x60\x2a\x31\x03\x73\xf5\x1b\x1b\xf1\x68\x25\xda\x66\xbc\xab\xb2\x63\x94\x5e\x44\xec\x17\xe1\xb0\xd5\x2d\x5d\x03\x65\x42\x12\x96\x62\xb5\x81\x8f\x37\x7f\x7d\x5e\x35\xa9\x18\x10\x26\x3e\xe9\xbb\xad\x8f\x3a\x74\x39\x38\x70\x7b\x5c\xc8\x38\x85\xfc\xf8\xae\xba\x44\xce\x5c\x68\x53\x50\x86\xb7\x74\xbd\xb6\x59\xe0\x91\xc0\xd8\x8c\xf3\x80\x37\x37\xf5\x47\x24\x19\x72\x83\x85\x08\xed\x0c\x1e\xad\x8c\x1a\xea\x9e\x5f\x19\xc7\xea\xd9\x95\x71\xdd\xe8\xfc\xad\xae\x1f\x38\x20\x4e\x3d\x7c\xfa\x38\x90\xba\x2e\x55\x23\xa4\x85\x1a\x10\x55\x37\xe8\x7f\x76\x74\x75\x17\x4b\xd0\x58\x29\x30\xec\x56\xfd\xc4\x04\x72\x55\xa5\xff\xd9\xab\x5f\x9a\xec\x20\x81\x57\xee\x6a\x5d\x92\x54\x2d\xbf\xb6\x97\x55\x8f\xaf\x50\xf9\xf8\xbf\xbf\xdc\xfa\xf9\xc5\x96\xa8\xc3\x56\x1b\xfc\xba\x78\x92\x62\x7a\x3b\x51\xb3\xc5\xf1\x4a\xa9\xae\x6f\x94\x21\xf1\x8d\x1a\xc6\xf7\x54\xf9\x40\x93\x2c\x3c\x2d\x3d\xd9\x42\x32\x78\xe8\xa4\x85\x72\x5f\x38\x05\x53\x7c\x31\x46\x2f\xf4\xd9\xe3\x93\xa0\x0d\x6c\xa6\x66\xfd\xfc\xc1\x65\xbb\x5b\xfb\x6e\x66\xd7\x51\x6f\xc6\x26\x77\x5d\x60\x7f\x76\x1d\x6e\x14\x7f\x86\x54\xdb\x2d\x6c\x9d\xf1\x4b\x6e\x43\x4a\x81\x53\x8d\x72\x74\x26\xbb\xef\xcf\x25\xbb\x7d\xc5\x39\x51\x7a\x76\x63\xaf\x0b\x86\x7a\xfe\xe6\xdc\xc3\x7e\x24\xe1\xde\x90\xdd\x11\x64\xf5\xf5\x8f\xee\xc2\x1e\xd6\x3b\x6f\xd1\x93\x4e\x1c\x4e\x81\x53\x7c\xbf\x3a\xd0\x16\x3e\xe2\x7a\x1f\x1a\x0a\x93\xf9\xd4\x90\xa1\x07\xc6\xe0\x08\x62\x39\xb3\x61\xc5\x11\x40\x4f\x17\x02\x6c\x9a\xd8\x07\xd8\xd0\xd4\x99\xfa\x34\x2c\xea\xb9\x19\x2c\xcf\x54\x68\x16\x9a\xf7\xc2\x8b\xab\xda\x1d\x11\x23\x71\x35\x79\x47\x43\x5f\x1c\xc8\x9c\x38\x23\x51\xec\x19\xd1\xdf\xcb\x05\x2f\x5b\xfe\xbf\xf6\x90\x3e\x08\x48\x80\x32\x2a\xbf\xad\xc2\x49\xff\x6b\xc0\x59\x62\x15\x58\xbf\x14\xa9\xb9\x05\x0f\xf0\x0d\xef\x56\xcd\x73\x18\x1c\xc4\x3c\x8e\xcb\x2a\x25\x65\x51\x09\x39\x7f\x33\x7b\x33\x8b\xf5\xdb\x61\x60\x61\x60\x5e\xa9\x2a\x56\xd5\xc8\x20\xe9\xbe\x11\xb8\x84\xb4\x5f\xcd\x02\x13\x51\x59\xd8\xae\x4e\x03\x5e\xb7\x28\x04\xc9\xd1\x76\xec\x1d\x44\x6d\x63\x41\x02\xcd\x3b\x5d\x4d\xb8\xc0\x10\xa3\x8c\x48\x32\x19\x7b\x3d\x0c\x5a\xb3\x79\x30\xed\x7c\x38\xfa\xa3\xd7\xdc\xe3\x29\xa7\x65\x25\xf0\x79\x48\x34\x26\x23\x50\x98\xe1\xe4\xfc\x79\xc7\x2e\xfb\x32\xd6\x23\x62\xf3\xcd\x28\x3e\x7f\x34\x5a\xaa\x6b\xe5\xed\x32\x6e\x7e\xae\x96\xb1\xfe\xaa\xf4\x5f\x00\x00\x00\xff\xff\x46\xe4\x1a\x68\x5d\x12\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
