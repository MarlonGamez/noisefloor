// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 9, 10, 13, 29, 447868100, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 11, 23, 48, 14, 811992600, time.UTC),
			uncompressedSize: 5423,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\xea\x49\x41\x1d\x29\x6d\xf7\xa7\xb0\xad\x02\x6b\x17\xac\x5d\xbb\x76\xa8\x83\xb6\x41\xe0\x07\x5a\x3a\x4b\x4c\x64\x4a\x20\x69\x3b\x46\x91\xef\x3e\x50\x94\x65\x92\x12\x13\x07\xcb\x4b\x2c\xf2\xfe\xdf\xef\x8e\x47\x4e\x0b\xb9\x2a\xdf\x9c\x00\x4c\x0b\x24\x99\xfa\x01\x30\x15\x29\xa7\xb5\x04\xb9\xab\x31\x09\x24\xde\xc9\xf8\x86\x6c\x88\x5e\x0d\x34\x0d\xc0\x86\x70\x10\x55\x7a\x8b\x72\x72\xd2\x2e\x2d\xd7\x2c\x95\xb4\x62\xc0\x31\xa7\x42\x22\xbf\xd8\x20\x93\xef\x09\xcb\x4a\xe4\xa1\xd8\xe4\x9f\xc9\x0a\x45\x4d\x52\x1c\x01\xab\x32\x1c\x35\x2a\x46\x40\xb3\x53\xf8\xd9\xca\x80\x66\x27\x22\x59\xd6\x30\x7f\x52\x72\x18\xf2\x50\x53\xee\x35\x84\xb8\x91\x26\x0f\x40\x89\x12\x50\x71\xfc\x49\x24\x81\x04\x7e\xde\x4f\x8c\x5d\xb1\xa5\x32\x2d\xa0\x91\x62\xf3\x01\xa4\x44\x20\x04\x69\x41\x58\x8e\xc1\xd8\xda\x02\x5b\x24\x7c\x23\xe5\x1a\xc7\x80\x1b\x19\x49\xc2\x73\x94\xd1\x46\xad\x80\xa5\x4b\xfd\x2d\x38\x92\xdb\xc9\x90\x9a\x92\xa6\xb7\x8e\x16\xbd\xb3\xaa\xd6\x02\xb3\x6a\xcb\xfc\xbb\xeb\xda\xbf\x87\x4c\x22\xf7\x6f\x97\x48\x36\xae\x77\xc6\xf6\xaa\xea\xed\x3a\xbe\x3b\x7b\x00\x6f\xd7\x52\x56\x4c\xe8\x68\x2c\xf4\xc7\xa8\x47\xf5\xae\xa4\xc8\xe4\x0f\x4d\x95\xea\x0f\x1f\xd5\x95\x49\x75\xe5\x10\xdd\x77\x28\xdb\xff\xd1\x25\x58\x98\x72\xf3\xaa\xfe\x16\x8b\xea\x0e\x12\x0d\xa9\x1c\xe5\xdb\x6a\xcd\x32\xca\x72\xad\xef\x2b\xa6\x32\x3c\x75\x53\x67\xf8\x1d\x7d\x59\x2e\x05\xca\x1f\x90\x98\xe6\xc3\x59\x23\x36\xba\x7b\x9c\xf3\xca\xe2\xbc\xda\x73\xee\x5c\xce\xfb\x63\xe1\x73\x8b\x3b\x0f\x08\x6e\x71\x37\x00\x9e\xc7\x92\xf8\x11\x77\x3a\xe8\xb7\xb8\xeb\xa7\xe5\x23\xee\xde\x55\x19\x76\x14\xea\xa3\x9f\x16\xd3\x0d\xa7\x20\xb3\x6a\xd5\x54\x71\x4f\xf7\xe5\xae\xc6\xb1\xae\x7e\x6b\xfd\xa2\xc4\x15\x32\xf9\x21\x1b\x03\xcd\xec\x2d\xe5\xc3\xf8\xe0\xce\x89\xc7\x86\xb4\x62\xa2\x2a\x31\x2a\xab\x3c\xdc\xab\xb7\x72\xac\x7b\x56\x24\x90\x65\xe1\xdf\xb3\x2f\x9f\x23\x21\x39\x65\x39\x5d\xee\x0e\xf4\x06\xc3\x7d\xf7\xfb\xbe\xd7\xe6\x52\x8e\x44\x62\x6b\xf3\x57\x4c\xd7\x5c\xd0\x0d\x3a\x8d\x0e\xf5\xb6\x89\x4e\x15\x1a\x05\x49\x85\xcc\x75\x59\x1e\x94\x3d\x0c\xe9\x96\x25\xab\xd2\xb5\x92\x18\x59\xea\x3f\xcf\x42\x2b\x5c\x41\x21\x65\x3d\x8e\xe3\xed\x76\x1b\x6d\x5f\x45\x15\xcf\xe3\x97\xe7\xe7\xe7\xb1\xd8\xe4\x81\x1d\xd8\xd6\xc0\x48\x69\x35\x36\xcc\x18\x00\x96\x02\x8f\xb7\x25\x34\x45\x9a\x72\x0e\xf8\x58\x56\x1c\x42\x75\x84\x30\xb2\x42\xa0\xac\xb3\xe2\x0f\x29\xb9\xe8\xfb\x1d\x09\x94\x6a\x8b\x2e\xd6\x12\x43\xc5\x34\xb2\x59\xae\xd5\xda\xfc\x11\x65\x14\x12\x38\x9f\x00\x85\x69\xc7\xfc\xae\xa0\x65\xc6\x91\x45\x25\xb2\x5c\x16\x13\xa0\xcf\x9f\xdb\xea\x55\x52\x5c\xea\x6b\x3a\x8f\x14\x86\x21\x49\xe0\x95\xdb\x78\x1a\x7b\x29\x63\xc8\x2f\xf1\x4e\x61\x7f\x88\x5b\x1b\x1d\x28\x8a\x60\x6e\x15\x51\x3f\xd8\x00\xa9\xe2\x84\xe4\x49\x88\x33\xd5\x39\x5d\x4e\x1f\xb1\x75\x8d\x2c\x6b\x88\xc2\x46\xfe\xa9\x5d\xcb\x4f\x0c\xa4\x79\xd6\x0b\x7f\x34\x07\x47\x03\xcb\x38\xcb\x99\x9e\xd9\xc3\xd8\xb5\x94\xef\x93\x33\x4c\xda\x06\x9e\x66\xc1\xdc\x83\xf6\x83\xbf\x1c\xe5\x9a\xb3\x46\xaf\xbf\x0b\xe4\x28\xdb\x84\xbc\xdd\xfd\x4b\x64\x11\xd6\x44\x16\x6e\xb9\xb7\xda\xbb\x8a\xef\x36\xe3\x58\x09\x00\x5e\x55\x07\x22\xba\x04\x2a\x01\xef\xa8\x90\x62\x04\x78\x97\x96\x6b\x75\x6a\x01\x61\x3b\xa0\xec\x06\x53\x89\x19\xb4\x43\x5a\xcb\x23\x1e\xcc\x51\x57\xa6\x8b\x2a\xdb\x45\xe9\x51\x90\x7f\x16\x0e\x73\x5d\xd3\x39\x50\x26\x24\x61\x29\x56\x4b\x78\x7f\xf9\xcf\xa7\x59\x63\x4a\x1b\x84\x53\xb7\x1c\x0e\xae\x7b\x05\xda\xe8\xec\x9d\x7e\x47\x63\x51\x45\xde\xef\xd5\xc1\x90\x3d\x16\x3a\x13\x14\xe3\x35\x9d\xcf\x4d\x14\x38\x20\x68\x79\xfc\x38\xe0\xcd\x14\xf5\x1e\x49\x86\xbc\x8d\x85\x08\x4d\x0b\x2c\x8b\xbb\x58\xa8\xb9\xdb\x4d\x09\x9c\xc1\x0b\xe5\xd1\x1b\xed\xd9\xd9\xd9\x83\xe9\xb1\x24\x3c\x39\x3d\xb6\x18\xed\x84\x6e\x0a\x5e\x05\xde\x46\xe1\x0b\x0d\xa9\xeb\x52\xd5\x46\x5a\xa8\x79\x5e\x15\x88\xfe\x65\xda\xa2\x0e\x6e\x09\x3a\x7c\x2a\xa3\x66\xf5\x7e\x60\x02\xb9\x4a\xdc\x0b\x73\xf5\x6b\x63\x2b\x24\xf0\xd2\x5e\xad\x4b\x92\xaa\xe5\x57\xe6\xb2\x2a\xfb\x19\x2a\x19\xbf\xb8\xcb\x9d\x9c\x5f\xcd\x9d\x66\xd6\xd7\x1c\xbf\x99\xeb\xaa\x63\xeb\xe5\xdf\x27\x8f\xa2\x51\xbb\x19\x35\xae\xfb\x81\xa9\x1a\x44\x43\x0c\x89\xcb\xd4\x14\x47\x8f\x94\x0f\xd4\xd3\xc4\xa1\xd2\x17\x14\x48\x06\xfb\x53\x5a\x28\xf1\x85\x95\x48\x85\xaa\x96\xe9\x99\x6e\x53\x2e\x54\x3a\xc5\xed\xe5\x47\x7f\x5f\xd8\x85\x01\xce\x3c\xbb\xbf\x7a\x69\xad\x97\xbe\x0b\x98\x4e\xbc\x3b\xbd\x0e\xd7\x94\x3b\x3e\x77\xc1\xbf\xd1\xc1\xbf\xd9\x07\x3f\xba\xf0\x9d\xf2\x37\x6e\x0e\x0e\x81\x2b\x4c\x6d\xfe\x33\xb7\xc7\x0b\xb0\x24\xa5\xc0\xfe\x18\x0d\x1e\x63\xae\x6f\xe6\x3d\xda\x81\xeb\x88\x5d\x86\xe6\xa9\x6d\x59\xda\xe3\x3c\xf6\x52\xd1\x16\x8c\x1b\x7a\xfb\xd4\x3a\x36\x08\x07\xf8\xce\xbe\xfd\xe5\x39\xc6\x7b\x11\x39\xe9\xc5\x60\xe0\xaa\xa7\x31\x37\x94\x34\x0d\xc3\x88\x6b\x3f\x74\x68\x5a\xcb\x47\x2d\x54\xfb\xc1\x19\x9a\xb2\x0c\x61\x66\x98\xf1\x7f\x06\xb8\x6d\x3d\x6e\x80\xdb\x22\xb2\x06\x5b\x1d\x16\xf5\xdd\xcc\xce\x23\x30\x16\x9a\x86\xd4\x33\xe2\x21\xa5\xba\xb1\x79\xf4\xea\xd2\xf2\xaa\x3e\x5a\xd1\xbe\x4f\x7a\xd4\xe8\x07\x92\xa4\xe7\xc8\xb1\xe2\xdb\x76\xeb\x91\x6e\x4e\xd9\x4f\xd6\xf0\xc0\xc9\xb5\x15\x90\x00\x65\x54\x7e\x9f\x85\xa7\xfd\xf7\xad\xfd\x8e\x81\x1f\x7d\xad\x54\xf3\x1d\x6e\xe1\x3b\x2e\x66\xcd\x77\x18\x6c\xc5\x38\x8e\xcb\x2a\x25\x65\x51\x09\x39\x7e\x7d\xfe\xfa\x3c\xd6\xcf\x01\x81\x11\xe2\xf6\x52\x5a\xb1\xaa\x46\x06\xc9\xe1\x9d\xcb\xc6\xbb\x79\xb9\x0d\x5a\x8d\x8a\xc3\x14\x75\x3f\x20\x75\x85\x42\x90\x1c\x4d\xc1\x4e\x17\xee\xea\x16\x12\x68\x6e\xc5\x35\xe1\x02\x43\x8c\x32\x22\xc9\xa9\xef\x82\x1d\x74\x6c\xe3\x60\x74\x90\x61\xd1\x7b\xcf\xfe\x87\x4d\x4e\xcb\x4a\xe0\xd3\x22\xd1\xb0\x78\x42\xd1\x0e\x71\xfb\x07\x4b\x33\xed\xd3\x58\x8f\xd2\xcd\x2b\x68\xbc\x7f\x06\x9d\xaa\x33\xf5\xcd\x34\x6e\xfe\x9d\x4c\x63\xfd\x4e\xfa\x5f\x00\x00\x00\xff\xff\xd9\xc0\xa8\x1b\x2f\x15\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
