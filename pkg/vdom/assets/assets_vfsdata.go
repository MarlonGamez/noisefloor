// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 7, 23, 7, 53, 417874973, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 9, 0, 11, 56, 385857196, time.UTC),
			uncompressedSize: 4948,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x98\xe8\xa4\x45\x5c\x69\x9b\xb4\x45\x60\x5b\x01\xba\x69\xd0\xa4\x48\x93\x22\x5e\x24\x59\x2c\x7c\xa0\xa5\xb1\xc4\x44\x26\x05\x92\x7e\x21\xf0\x7f\x2f\x28\xca\x12\x49\x49\xfb\xba\xac\xc5\x79\xcf\x7c\x33\x7c\xcc\x0b\xb5\x29\x5f\x5f\x00\xcc\x0b\x24\x99\xfe\x01\x30\x97\xa9\xa0\x95\x02\x75\xac\x30\x09\x14\x1e\x54\xfc\x9d\xec\x88\x59\x0d\x0c\x0f\xc0\x8e\x08\x90\x3c\xfd\x81\x6a\x76\xd1\x2c\xad\xb7\x2c\x55\x94\x33\x10\x98\x53\xa9\x50\xbc\xdd\x21\x53\xef\x08\xcb\x4a\x14\xa1\xdc\xe5\x1f\xc9\x06\x65\x45\x52\x9c\x00\xe3\x19\x4e\x6a\x13\x13\xa0\xd9\x25\xfc\x6c\x74\x40\x4d\x89\x48\x96\xd5\xc2\x1f\xb4\x1e\x86\x22\x34\x9c\x67\x0b\x21\xee\x94\x2d\x03\x50\xa2\x02\xd4\x12\x7f\x11\x45\x20\x81\x20\x98\x59\x54\xb9\xa7\x2a\x2d\xa0\xd6\xe2\xca\x01\xa4\x44\x22\x04\x69\x41\x58\x8e\xc1\xd4\x21\x81\xa3\xf2\x27\x7c\x21\xe5\x16\xa7\x80\x3b\x15\x29\x22\x72\x54\xd1\x4e\xaf\xc0\x69\xe6\x89\xad\x04\x92\x1f\xb3\x21\x33\x25\x4d\x7f\x78\x56\x0c\x65\xc3\xb7\x12\x33\xbe\x67\xe3\xd4\x6d\x35\x4e\x43\xa6\x50\x8c\x93\x4b\x24\x3b\x3f\x3a\x8b\xbc\xe1\x3d\xaa\x17\xbb\x47\x03\xb8\xde\x2a\xc5\x99\x34\xd9\x58\x99\x8f\x49\x8f\xeb\x4d\x49\x91\xa9\x6f\x86\x2b\x35\x1f\x63\x5c\xb7\x36\xd7\xad\xc7\x74\x6a\x51\x76\xfe\xa3\x6b\x70\x30\xe5\xd7\x55\xff\xad\x56\xfc\x00\x89\x81\x54\x8e\xea\xfa\x9a\x1f\xc2\x4b\xbf\x58\x56\xa4\xd1\xa7\xf5\x5a\xa2\xfa\x06\x89\xed\x30\xfc\x52\x2b\x8a\x0e\x0f\x4b\xde\x3a\x92\xb7\x67\xc9\xa3\x2f\x79\xf2\xa3\xe9\x21\xc6\xe1\xd0\xe8\xce\xf8\xa6\x6e\x89\x5e\x35\x6e\x8e\x15\x4e\x4d\x2b\x39\xeb\x6f\x4b\xdc\x20\x53\xef\xb3\x29\xd0\xcc\x25\x69\x8f\xa7\x9d\xf3\x17\x4e\x9e\xbb\x8f\x94\x33\xc9\x4b\x8c\x4a\x9e\x87\x67\xf3\x4e\xfa\xcc\x00\x88\x24\xb2\x2c\xfc\x67\xf1\xe9\x63\x24\x95\xa0\x2c\xa7\xeb\x63\xc7\x6f\x09\x9c\xda\xdf\xa7\xde\xcc\x48\x05\x12\x85\x8d\xcf\x9f\x31\xdd\x0a\x49\x77\xe8\x4d\x0d\x34\x64\xbb\xd4\x3a\x35\xba\xbe\xba\xcc\xdb\xb2\xec\x8c\xdd\x8f\x8f\x46\x24\xe3\xe9\x56\x6b\x8c\x1c\xf3\x1f\x17\xa1\x93\xae\xa0\x50\xaa\x9a\xc6\xf1\x7e\xbf\x8f\xf6\x2f\x23\x2e\xf2\xf8\xc5\xd5\xd5\x55\x2c\x77\x79\xe0\x26\xb6\x71\x30\xd2\x56\x2d\x82\x9d\x03\xc0\x52\xe2\xe3\x7d\x09\x6d\x95\xb6\x9e\x0e\x1f\x6b\x2e\x20\xd4\xf3\x98\x91\x0d\x02\x65\xad\x17\x7f\x2a\x25\x64\x3f\xee\x48\xa2\xd2\x24\xba\xda\x2a\x0c\xb5\xd0\xc4\x15\xb9\xd3\x6b\xcb\x07\x8c\x51\x48\xe0\x6a\x06\x14\xe6\xad\xf0\x9b\x82\x96\x99\x40\x16\x95\xc8\x72\x55\xcc\x80\x3e\x7f\xee\x9a\xd7\x45\xf1\xb9\xef\xe8\x32\xd2\x18\x86\x24\x81\x97\x7e\x17\xd7\xfe\x52\xc6\x50\xdc\xe0\x41\x63\x7f\x48\xda\x38\x1d\x68\x8e\x60\xe9\x34\x51\x3f\xd9\x00\xa9\x96\x84\xe4\x49\x88\xb3\xcd\x79\x03\xc4\xec\x57\x55\x85\x2c\xab\x99\xc2\x5a\xff\xa5\xdb\xcb\x4f\x4c\xa4\xbd\x71\xca\xf1\x6c\x0e\xee\xb3\x8e\x73\x4e\x30\x3d\xb7\x87\xb1\xeb\x18\x3f\x17\x67\x98\xb5\x49\x3c\xcd\x82\xe5\x08\xda\xbb\x78\x05\xaa\xad\x60\xb5\xdd\xf1\x29\x90\xa3\x6a\x0a\x72\x7d\xfc\x8f\xa8\x22\xac\x88\x2a\xfc\x76\x6f\xac\xb7\x1d\xdf\x12\xe3\x58\x2b\x00\xc1\x79\xc7\x44\xd7\x40\x15\xe0\x81\x4a\x25\x27\x80\x87\xb4\xdc\x66\x94\xe5\x40\xd8\x11\x28\xfb\x8e\xa9\xc2\x0c\x9a\x13\x4f\x23\x23\xef\xad\x51\xdb\xa6\x2b\x9e\x1d\xa3\xf4\x51\x90\x7f\x16\x0e\x4b\xdd\xd1\x25\x50\x26\x15\x61\x29\xf2\x35\xbc\xbb\xf9\xf7\xc3\xa2\x76\xa5\x49\xc2\xa5\xdf\x0e\x5d\xe8\xa3\x0a\x5d\x74\x0e\xec\x2b\x8f\xc4\xa2\xce\xfc\x78\x54\x9d\x23\x67\x2c\xb4\x2e\x68\xc1\x3b\xba\x5c\xda\x28\xf0\x40\xd0\xc8\x8c\xe3\x40\xd4\x47\x92\x77\x48\x32\x14\x4d\x2e\x64\x68\x7b\x70\x6f\x65\xf4\x59\xf6\xe9\x95\x71\xa4\x9e\x5c\x19\x57\x8d\xf1\xdf\x9a\x07\x03\xa3\xe3\xd4\xcb\x4f\x3f\x0f\xa4\xaa\x4a\xdd\x08\x69\xa1\x4f\xc2\xba\x1b\xcc\x2f\xdb\xba\xde\xa5\x15\x98\x5c\xe9\x64\xd8\xad\xfa\x9e\x49\x14\xba\x4a\xbf\xda\xab\x9f\x6b\xef\x20\x81\x17\xee\x6a\x55\x92\x54\x2f\xbf\xb4\x97\x75\x8f\x2f\x50\xeb\xf8\xcd\x5f\x6e\xf5\xfc\x6e\x53\xf4\x18\x36\x02\x7f\xcc\x1e\x84\x98\x09\x27\xaa\x43\x1c\xaf\x94\xee\xfa\x9a\x19\x12\x5f\xa8\x46\x7c\x8f\x55\x0c\x34\xc9\xcc\xe3\x32\x47\x78\x48\x06\x87\x4e\x5a\x68\xf5\x85\x53\x30\x8d\x97\x46\xe8\x99\x99\x3d\x3e\x08\x5a\xc3\xcd\xf5\xc0\x7c\xbf\x75\xd1\xee\xd6\xbe\xbb\x9c\x18\xab\x37\x63\x57\x14\x53\x60\xff\x90\x3e\xdc\x28\xfe\x71\x53\x87\x5b\xd8\x3c\xe3\xdb\xdf\x9a\x94\x12\x27\x26\xcb\xd1\x19\xec\xbe\x3e\x17\xec\xf6\xe6\xe7\x58\xe9\xc9\x8d\xdd\x8b\x1a\xe8\xf9\xc1\xb9\xc3\x7e\xc4\xe1\xde\x99\xbc\x03\xc8\xe2\xcb\xdf\x23\xbb\x5f\xcb\x77\x0e\xd1\xa3\x5e\x0e\x5e\x37\x4c\x55\x87\x2e\x1a\xa6\xd0\x91\x30\x71\x98\x54\x34\x9e\x4f\x1a\x30\xf4\x92\x31\x78\x38\xb1\x94\xd9\x69\xc5\x91\x84\x9e\x1e\x99\xe0\xa6\x89\xfd\x04\x37\x30\x75\xce\x83\x26\x2d\xfa\xbb\x3e\x72\x9e\xa1\x50\x2f\xd4\x17\xe0\x47\x57\xb5\x1b\x11\x23\x76\x0d\x78\x47\x4d\x3f\xda\x50\x33\x71\x46\xac\xd8\xa7\x47\x3f\x96\x07\x2d\xdc\x33\xa4\xf7\x12\x12\xa0\x8c\xaa\xaf\x8b\xf0\xb2\xff\x08\x72\xa6\x58\x05\x36\xd7\x25\x7d\x6e\xc1\x3d\x7c\xc5\xd5\xa2\xfe\x0e\x83\xbd\x9c\xc6\x71\xc9\x53\x52\x16\x5c\xaa\xe9\xab\xab\x57\x57\xb1\xb9\x41\x06\x56\x0e\x9a\xcb\x16\x67\xbc\x42\x06\x49\xf7\x18\xe2\x02\xd2\xbe\xb4\x05\x8d\x45\x2d\x61\xab\x3a\x0d\x68\xdd\xa0\x94\x24\x47\x5b\xb1\x37\x88\xda\xc6\x82\x04\xea\xdb\x5e\x45\x84\xc4\x10\xa3\x8c\x28\x72\x39\x76\x71\x0c\x5a\xb1\x69\x30\xe9\x74\x38\xfc\xa3\xdb\xdc\xfd\x2e\xa7\x25\x97\xf8\xb4\x4c\xd4\x22\x23\xa9\x68\x0e\x27\xe7\x57\x2d\xbb\xec\xf3\xd8\x1c\x11\xeb\xa7\xb2\xf8\xfc\x56\x36\xd7\xdb\xca\xeb\x79\x5c\xff\xbb\x98\xc7\xe6\x31\xed\xff\x00\x00\x00\xff\xff\x41\xea\x56\x27\x54\x13\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
