// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 9, 10, 13, 29, 447868100, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 11, 23, 20, 14, 707097300, time.UTC),
			uncompressedSize: 5258,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x38\xd5\x93\x82\x3a\x52\xda\xee\x52\xd8\x56\x81\xb5\x0b\xd6\x0e\x5d\x3b\xd4\x41\xdb\x20\xf0\x03\x2d\x1d\x5b\x4c\x65\x4a\x20\x69\x3b\x46\xe1\xff\x3e\x50\x94\x25\x92\x12\x13\x07\xcb\x4b\x2c\x9e\x2b\xbf\x73\xe1\x21\xa7\xb9\x5c\x17\x6f\xce\x00\xa6\x39\x92\x4c\xfd\x00\x98\x8a\x94\xd3\x4a\x82\xdc\x57\x98\x04\x12\xef\x65\x7c\x47\xb6\x44\xaf\x06\x9a\x07\x60\x4b\x38\x88\x32\xfd\x81\x72\x72\xd6\x2c\x2d\x37\x2c\x95\xb4\x64\xc0\x71\x45\x85\x44\x7e\xb5\x45\x26\xdf\x13\x96\x15\xc8\x43\xb1\x5d\x7d\x22\x6b\x14\x15\x49\x71\x04\xac\xcc\x70\x54\x9b\x18\x01\xcd\xce\xe1\x67\xa3\x03\x6a\x4a\x44\xb2\xac\x16\xfe\xa8\xf4\x30\xe4\xa1\xe6\x3c\x5a\x08\x71\x2b\x4d\x19\x80\x02\x25\xa0\x92\xf8\x93\x48\x02\x09\x04\xc1\xc4\xa0\x8a\x1d\x95\x69\x0e\xb5\x16\x5b\x0e\x20\x25\x02\x21\x48\x73\xc2\x56\x18\x8c\x2d\x12\x58\x2a\x7f\xc2\x57\x52\x6c\x70\x0c\xb8\x95\x91\x24\x7c\x85\x32\xda\xaa\x15\x38\x4c\x1c\xb1\x05\x47\xf2\x63\x32\x64\xa6\xa0\xe9\x0f\xc7\x8a\xa6\xac\xcb\x8d\xc0\xac\xdc\x31\x3f\x75\x53\xf9\x69\xc8\x24\x72\x3f\xb9\x40\xb2\x75\x77\x67\x90\xd7\x65\x8f\xea\xec\xdd\xa1\x01\xbc\xdd\x48\x59\x32\xa1\xd1\x58\xe8\x8f\x51\x8f\xeb\x5d\x41\x91\xc9\xef\x9a\x2b\xd5\x1f\x3e\xae\x1b\x93\xeb\xc6\x61\x3a\xb4\x59\x76\xfc\xa3\x4b\xb0\x72\xca\x8d\xab\xfa\x5b\x2c\xca\x7b\x48\x74\x4a\xad\x50\xbe\x2d\x37\x2c\xa3\x6c\xa5\xed\x7d\xc1\x54\x86\xe7\x6e\xe8\x8c\x7d\x47\x9f\x97\x4b\x81\xf2\x3b\x24\xa6\xfb\x70\x51\xab\x8d\xee\x1f\x97\xbc\xb1\x24\x6f\x8e\x92\x7b\x57\xf2\xe0\xee\xad\x97\x3f\x16\x87\xca\xf5\xac\x5c\xd7\x05\xd2\x8b\xcd\xf5\xbe\xc2\xb1\x2e\x2c\x6b\xfd\xaa\xc0\x35\x32\xf9\x21\x1b\x03\xcd\x6c\x92\xf2\x78\xdc\x39\x7f\x66\xa1\xde\x7d\xa4\x25\x13\x65\x81\x51\x51\xae\xc2\xa3\x79\x0b\x3e\xdd\x0e\x22\x81\x2c\x0b\xff\x9e\x7d\xfe\x14\x09\xc9\x29\x5b\xd1\xe5\xbe\xe3\x37\x04\x0e\xed\xef\x43\xaf\x83\xa4\x1c\x89\xc4\xc6\xe7\x2f\x98\x6e\xb8\xa0\x5b\x74\x7a\x08\x6a\xb2\x19\x78\x05\x8d\x8a\xb6\x0a\xfa\xa6\x28\x3a\x63\x0f\x67\x4b\x23\x92\x95\xe9\x46\x69\x8c\x2c\xf3\x9f\x66\xa1\x05\x57\x90\x4b\x59\x8d\xe3\x78\xb7\xdb\x45\xbb\x57\x51\xc9\x57\xf1\xcb\xcb\xcb\xcb\x58\x6c\x57\x81\x0d\x6c\xe3\x60\xa4\xac\x1a\x04\x13\x03\xc0\x42\xe0\xe9\xbe\x84\xa6\x4a\x53\x4f\x97\x1f\xcb\x92\x43\xa8\xba\x33\x23\x6b\x04\xca\x5a\x2f\xfe\x90\x92\x8b\xfe\xbe\x23\x81\x52\x91\xe8\x62\x23\x31\x54\x42\x23\x5b\xe4\x56\xad\xcd\x1f\x31\x46\x21\x81\xcb\x09\x50\x98\xb6\xc2\xef\x72\x5a\x64\x1c\x59\x54\x20\x5b\xc9\x7c\x02\xf4\xf9\x73\xdb\xbc\x0a\x8a\xcb\x7d\x4b\xe7\x91\xca\x61\x48\x12\x78\xe5\xd6\x74\xed\x2f\x65\x0c\xf9\x35\xde\xab\xdc\x1f\x92\xd6\x4e\x07\x8a\x23\x98\x5b\x45\xd4\x07\x1b\x20\x55\x92\x90\x3c\x29\xe3\x4c\x73\x4e\x03\xd1\xa7\x57\x55\x21\xcb\x6a\xa6\xb0\xd6\x7f\x6e\xd7\xf2\x13\x81\x34\x8f\x51\xe1\x47\x73\xf0\xd4\xb5\x9c\xb3\x36\xd3\x73\x7b\x38\x77\x2d\xe3\xc7\xe0\x0c\xb3\x36\xc0\xd3\x2c\x98\x7b\xb2\xbd\xdb\x2f\x47\xb9\xe1\xac\xb6\xeb\xef\x02\x2b\x94\x4d\x40\xde\xee\xff\x25\x32\x0f\x2b\x22\x73\xb7\xdc\x1b\xeb\x6d\xc5\xb7\xc4\x38\x56\x0a\x80\x97\x65\xc7\x44\x97\x40\x25\xe0\x3d\x15\x52\x8c\x00\xef\xd3\x62\xa3\x0e\x04\x20\x6c\x0f\x94\xdd\x61\x2a\x31\x83\x66\xfe\x69\x64\xc4\x83\x31\x6a\xcb\x74\x51\x66\xfb\x28\x3d\x29\xe5\x9f\x85\xc3\x52\xb7\x74\x0e\x94\x09\x49\x58\x8a\xe5\x12\xde\x5f\xff\xf3\x71\x56\xbb\xd2\x80\x70\xee\x96\x43\xb7\x75\xaf\x42\x3b\x3b\x07\xce\x95\x13\x73\x51\x21\xef\xdf\x55\xe7\xc8\x31\x17\x5a\x17\x94\xe0\x2d\x9d\xcf\xcd\x2c\x70\x92\xa0\x91\xf1\xe7\x01\xaf\x07\x94\xf7\x48\x32\xe4\x0d\x16\x22\x34\x3d\xb0\x3c\x6e\xb1\x50\x23\xad\x1b\x12\xb8\x80\x17\x6a\x47\x6f\xf4\xce\x2e\x2e\x1e\x0c\x8f\xa5\xe1\xc9\xe1\xb1\xd5\xe8\x4d\xe8\xa6\xe0\x35\xe0\x6d\x14\x3e\x68\x48\x55\x15\xaa\x36\xd2\x5c\x8d\xca\xaa\x40\xf4\x2f\xd3\x17\x75\x70\x4b\xd0\xf0\xa9\x88\x9a\xd5\xfb\x81\x09\xe4\x2a\x70\x2f\xcc\xd5\x2f\xb5\xaf\x90\xc0\x4b\x7b\xb5\x2a\x48\xaa\x96\x5f\x99\xcb\xaa\xec\x67\xa8\x74\xfc\xe2\x2e\xb7\x7a\x7e\x35\x29\xf5\x18\xad\x25\x7e\x33\xd7\x55\xc7\xd6\xcb\xbf\x4f\x1e\xcd\x46\xbd\xcd\xa8\xde\xba\x3f\x31\x55\x83\xa8\x99\x21\x71\x85\xea\xe2\xe8\xb1\xf2\x81\x7a\x9a\x38\x5c\x7a\xf6\x87\x64\xb0\x3f\xa5\xb9\x52\x9f\x5b\x81\x54\x59\xd5\x08\x3d\xd3\x6d\xca\x4d\x95\xd6\x70\x73\xaf\xd0\xdf\x57\x76\x61\xd8\x39\xd1\xdd\x6a\xb4\xd5\x6b\xdf\xdd\x46\x07\xde\x9d\xee\x87\x6b\xca\x9d\x4c\x5b\xf0\xef\x34\xf8\x77\x47\xf0\xa3\x2b\xdf\x29\x7f\xe7\xc6\xa0\x03\x2e\x37\xad\xf9\xcf\xdc\x9e\x2c\xc0\x92\x14\x02\xfb\x17\x07\xf0\x38\x73\x7b\x37\xef\xf1\x0e\x4c\xfa\x76\x19\x9a\xa7\xb6\xe5\x69\x4f\xf2\x70\xe2\x75\xaf\x29\x18\x17\x7a\xfb\xd4\x3a\x15\x84\x2e\x7d\x67\x5f\xff\xf2\x1c\xe3\x3d\x44\xce\x7a\x18\x0c\xdc\xa2\x74\xce\x0d\x05\x4d\xa7\x61\xc4\xf5\x3e\x34\x34\x8d\xe7\xa3\x26\x55\xfb\xe0\x0c\x4d\x59\x86\x32\x13\x66\xfc\x9f\x00\x37\xad\xc7\x05\xb8\x29\x22\x6b\xb0\xd5\xb0\xa8\xef\x7a\x76\x1e\x81\xb1\x50\x37\xa4\x9e\x13\x0f\x19\xd5\x8d\xcd\x63\x57\x97\x96\xd7\xf4\xc9\x86\x8e\x7d\xd2\x63\x46\xbf\x3d\x24\xbd\x8d\x9c\xaa\xbe\x69\xb7\x1e\xed\xe6\x94\xfd\x64\x0b\x0f\x9c\x5c\x3b\x01\x09\x50\x46\xe5\xb7\x59\x78\xde\x7f\x3a\x3a\x52\x8c\xfc\xd1\xd7\x4a\x35\xdf\xe1\x0e\xbe\xe1\x62\x56\x7f\x87\xc1\x4e\x8c\xe3\xb8\x28\x53\x52\xe4\xa5\x90\xe3\xd7\x97\xaf\x2f\x63\x7d\xd3\x0e\x0c\x88\x9b\x4b\x69\xc9\xca\x0a\x19\x24\xdd\x13\x92\x9d\xef\xe6\xe5\x36\x68\x2c\x2a\x09\x53\xd5\x61\x40\xeb\x1a\x85\x20\x2b\x34\x15\x3b\x5d\xb8\xad\x5b\x48\xa0\xbe\x15\x57\x84\x0b\x0c\x31\xca\x88\x24\xe7\xbe\x0b\x76\xd0\x8a\x8d\x83\x51\xa7\xc3\xe2\xf7\x9e\xfd\x0f\xbb\x9c\x16\xa5\xc0\xa7\x21\x51\x8b\x78\xa0\x68\x86\xb8\xe3\x5b\xa0\x19\xf6\x69\xac\x47\xe9\xfa\x81\x31\x3e\xbe\x30\x4e\xd5\x99\xfa\x66\x1a\xd7\xff\xce\xa6\xb1\x7e\x82\xfc\x2f\x00\x00\xff\xff\x0c\x49\x93\x8f\x8a\x14\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
