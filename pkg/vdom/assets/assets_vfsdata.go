// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 12, 0, 30, 19, 624563115, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 13, 3, 11, 52, 901591801, time.UTC),
			uncompressedSize: 5560,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x18\xdb\x6e\xdb\xb8\xf2\x3d\x5f\x31\xd5\x93\x82\x3a\x52\xda\x9e\x4b\x61\x5b\x05\x4e\x73\x82\x6d\xb7\xdd\x76\x51\x07\x6d\x83\xc0\x0f\xb4\x34\x96\x98\xc8\xa4\x20\xd2\x76\x8c\x22\xff\xbe\xa0\x28\xcb\x24\x25\x26\xce\x6e\x5e\x62\x71\xee\x57\xce\x70\x5a\xc8\x55\xf9\xee\x04\x60\x5a\x20\xc9\xd4\x0f\x80\xa9\x48\x6b\x5a\x49\x90\xbb\x0a\x93\x40\xe2\xbd\x8c\x6f\xc9\x86\xe8\xd3\x40\xe3\x00\x6c\x48\x0d\x82\xa7\x77\x28\x27\x27\xed\xd1\x72\xcd\x52\x49\x39\x83\x1a\x73\x2a\x24\xd6\x97\x1b\x64\xf2\x03\x61\x59\x89\x75\x28\x36\xf9\x17\xb2\x42\x51\x91\x14\x47\xc0\x78\x86\xa3\x46\xc4\x08\x68\x76\x0a\xbf\x5a\x1e\xd0\x40\x22\x92\x65\x0d\xf1\x67\xc5\x87\x61\x1d\x6a\xcc\xbd\x84\x10\x37\xd2\xa4\x01\x28\x51\x02\x2a\x8a\xff\x13\x49\x20\x81\x5f\x0f\x13\x03\x2a\xb6\x54\xa6\x05\x34\x5c\x6c\x3a\x80\x94\x08\x84\x20\x2d\x08\xcb\x31\x18\x5b\x20\xb0\x59\xc2\x77\x52\xae\x71\x0c\xb8\x91\x91\x24\x75\x8e\x32\xda\xa8\x13\xb0\x64\xa9\xbf\x45\x8d\xe4\x6e\x32\x24\xa6\xa4\xe9\x9d\x23\x45\x43\x56\x7c\x2d\x30\xe3\x5b\xe6\x87\xae\x2b\x3f\x0c\x99\xc4\xda\x0f\x2e\x91\x6c\x5c\xeb\x0c\xf0\x8a\xf7\xa0\x8e\xed\x0e\x0c\xe0\xfd\x5a\x4a\xce\x84\xf6\xc6\x42\x7f\x8c\x7a\x58\x17\x25\x45\x26\x7f\x6a\xac\x54\x7f\xf8\xb0\xae\x4d\xac\x6b\x07\xe9\xa1\xcb\xb2\xfd\x1f\x5d\x82\x95\x53\x6e\x5c\xd5\xdf\x62\xc1\xef\x21\xd1\x29\x95\xa3\x7c\xcf\xd7\x2c\xa3\x2c\xd7\xf2\xbe\x61\x2a\xc3\x53\x37\x74\x86\xdd\xd1\xd7\xe5\x52\xa0\xfc\x09\x89\xa9\x3e\x9c\x35\x6c\xa3\xfb\xa7\x29\xaf\x2d\xca\xeb\x3d\xe5\xce\xa5\x7c\x38\x36\x7d\xee\x70\xe7\x49\x82\x3b\xdc\x0d\x24\xcf\x53\x41\xfc\x84\x3b\xed\xf4\x3b\xdc\xf5\xc3\xf2\x09\x77\x17\x3c\xc3\x0e\x43\x7d\xf4\xc3\x62\x9a\xe1\x14\x64\xc6\x57\x4d\x15\xf7\x64\x5f\xed\x2a\x1c\xeb\xea\xb7\xce\x2f\x4b\x5c\x21\x93\x1f\xb3\x31\xd0\xcc\x06\x29\x1b\xc6\x07\x73\x4e\x3c\x3a\xa4\x9c\x09\x5e\x62\x54\xf2\x3c\xdc\x8b\xb7\x62\xac\x7b\x56\x24\x90\x65\xe1\xef\xb3\xaf\x5f\x22\x21\x6b\xca\x72\xba\xdc\x1d\xf0\x0d\x82\x87\xee\xf7\x43\xaf\xcd\xa5\x35\x12\x89\xad\xce\xdf\x30\x5d\xd7\x82\x6e\xd0\x69\x74\xa8\xc1\x66\x76\x2a\xd7\xa8\x94\x54\x99\xb9\x2e\xcb\x83\xb0\xc7\x53\xba\x25\xc9\x78\xba\x56\x1c\x23\x4b\xfc\x97\x59\x68\xb9\x2b\x28\xa4\xac\xc6\x71\xbc\xdd\x6e\xa3\xed\x9b\x88\xd7\x79\xfc\xfa\xfc\xfc\x3c\x16\x9b\x3c\xb0\x1d\xdb\x2a\x18\x29\xa9\x06\xc0\xf4\x01\x60\x29\xf0\x78\x5d\x42\x93\xa5\xc9\xe7\x90\x1f\x4b\x5e\x43\xa8\xae\x10\x46\x56\x08\x94\x75\x5a\xfc\x4f\xca\x5a\xf4\xed\x8e\x04\x4a\x05\xa2\x8b\xb5\xc4\x50\x11\x8d\x6c\x92\x1b\x75\x36\x7f\x42\x18\x85\x04\xce\x27\x40\x61\xda\x11\x5f\x14\xb4\xcc\x6a\x64\x51\x89\x2c\x97\xc5\x04\xe8\xcb\x97\xb6\x78\x15\x14\x17\xfb\x86\xce\x23\x95\xc3\x90\x24\xf0\xc6\x6d\x3c\x4f\x37\xa6\xc6\x22\x75\xb1\x5e\x70\x26\x75\x7d\x0c\x49\xd0\x86\x05\x57\x78\x2f\x83\xb9\xdd\x0e\x06\x42\xd2\x31\xa6\x8c\x61\xad\x88\xfe\x06\xdb\x93\x27\x44\xa4\x8a\x0f\x24\xcf\x4a\x7d\x53\xb8\xd3\x6e\xf5\x5d\x5f\x55\xc8\xb2\x06\x29\x6c\xf8\x9f\xda\x4d\xe5\x99\x11\x35\x87\x0e\xe1\x0f\xeb\xe0\x8c\x62\x29\x67\x19\xd3\x53\x7b\xb8\x88\x2c\xe1\xfb\x2c\x19\x46\x6d\xc3\x40\xb3\x60\xee\x29\xbb\x83\xbd\x35\xca\x75\xcd\x1a\xb9\xfe\x76\x94\xa3\x6c\x03\xf2\x7e\xf7\x27\x91\x45\x58\x11\x59\xb8\x7d\xa7\x95\xde\xb5\x9e\x0e\x18\xc7\x8a\x01\xd4\x9c\x1f\x90\xe8\x12\xa8\x04\xbc\xa7\x42\x8a\x11\xe0\x7d\x5a\xae\xd5\xf5\x09\x84\xed\x80\xb2\x5b\x4c\x25\x66\xd0\x4e\x8b\x2d\x8d\x78\x34\x46\x5d\xbf\x58\xf0\x6c\x17\xa5\x47\xd5\xde\x8b\x70\x98\xea\x86\xce\x81\x32\x21\x09\x4b\x91\x2f\xe1\xc3\xd5\x1f\x9f\x67\x8d\x2a\xad\x13\x4e\xdd\xba\x3b\x98\xee\x65\x68\x67\x67\xef\x1a\x3e\x3a\x17\x95\xe7\xfd\x56\x1d\x14\xd9\xe7\x42\xa7\x82\x22\xbc\xa1\xf3\xb9\x99\x05\x4e\x12\xb4\x34\xfe\x3c\xa8\x9b\x71\xee\x03\x92\x0c\xeb\xd6\x17\x22\x34\x35\xb0\x34\xee\x7c\xa1\x16\x00\x37\x24\x70\x06\xaf\x94\x45\xef\xb4\x65\x67\x67\x8f\x86\xc7\xe2\xf0\xec\xf0\xd8\x6c\xb4\x11\xba\x29\x78\x05\x78\x1b\x85\xcf\x35\xa4\xaa\x4a\x55\x1b\x69\xa1\x16\x0b\x55\x20\xfa\x97\xa9\x8b\x9a\x20\x24\x68\xf7\xa9\x88\x9a\xd5\xfb\x91\x09\xac\x55\xe0\x5e\x99\xa7\xdf\x1a\x5d\x21\x81\xd7\xf6\x69\x55\x92\x54\x1d\xbf\x31\x8f\x55\xd9\xcf\x50\xf1\xf8\x97\x7b\xdc\xf1\xf9\xb7\x09\x69\x96\x0e\x4d\xf1\x1f\xf3\x5c\xf5\x6f\x7d\xfc\xdf\xc9\x93\xd9\xa8\xcd\x8c\x1a\xd3\xfd\x89\xa9\x1a\x44\x83\x0c\x89\x4b\xd4\x14\x47\x0f\xb5\x1e\xa8\xa7\x89\x83\xa5\x37\x25\x48\x06\xfb\x53\x5a\x28\xf6\x85\x15\x48\x95\x55\x2d\xd1\x0b\xdd\xa6\xdc\x54\xe9\x04\xb7\x5b\x98\xfe\xbe\xb4\x0b\x03\x9c\xfb\x6c\xbf\x03\x6a\xa9\x57\xbe\x4d\x50\x07\xde\x1d\xa3\x87\x6b\xca\x9d\xe3\x3b\xe7\xdf\x6a\xe7\xdf\xee\x9d\x1f\x5d\xfa\xc6\x8d\x5b\x37\x06\x07\xc7\x15\xa6\x34\xff\x9d\xdb\xa3\x05\x58\x92\x52\x60\x7f\x9e\x07\x8f\x32\x37\xb7\xf3\x1e\xee\xc0\x5e\x64\x97\xa1\x79\x6b\x5b\x9a\xf6\x28\x8f\xdd\x6e\xda\x82\x71\x5d\x6f\xdf\x5a\xc7\x3a\xe1\x90\xbe\xb3\xef\xbf\x79\xae\xf1\x9e\x47\x4e\x7a\x3e\x18\xd8\x39\x75\xce\x0d\x05\x4d\xa7\x61\x54\x6b\x3b\xb4\x6b\x5a\xcd\x47\x6d\xaa\xf6\x9d\x33\x3c\xc8\x75\xcc\x4c\x37\xe3\x3f\x74\x70\xdb\x7a\x5c\x07\xb7\x45\x64\x4d\xd8\xda\x2d\xea\xbb\x19\xe2\x47\x60\x1c\x34\x0d\xa9\xa7\xc4\x63\x42\x75\x63\xf3\xc8\xd5\xa5\xe5\x15\x7d\xb4\xa0\x7d\x9f\xf4\x88\xd1\x2f\x35\x49\xcf\x90\x63\xd9\xb7\xed\xd6\xc3\xdd\x9c\xb9\x9f\x2d\xe1\x91\x9b\x6b\x2b\x20\x01\xca\xa8\xfc\x31\x0b\x4f\xfb\x0f\x6d\x7b\x88\x91\x3f\x7a\xbf\x55\xf3\x1d\x6e\xe1\x07\x2e\x66\xcd\x77\x18\x6c\xc5\x38\x8e\x4b\x9e\x92\xb2\xe0\x42\x8e\xdf\x9e\xbf\x3d\x8f\xf5\xbb\x44\x60\xb8\xb8\xdd\x8e\x39\xe3\x15\x32\x48\x0e\x0f\x6e\x76\xbe\x9b\x5b\x76\xd0\x4a\x54\x14\x26\xab\x87\x01\xae\x2b\x14\x82\xe4\x68\x32\x76\xba\x70\x57\xb7\x90\x40\xb3\x9e\x57\xa4\x16\x18\x62\x94\x11\x49\x4e\x7d\x9b\x7e\xd0\x91\x8d\x83\xd1\x81\x87\x85\xef\xbd\xfb\x1f\x57\x39\x2d\xb9\xc0\xe7\x79\xa2\x21\xf1\xb8\xa2\x1d\xe2\xf6\x2f\xa7\x66\xd8\xa7\xb1\x1e\xa5\x9b\xe7\xd8\x78\xff\x1e\x3b\x55\x77\xea\xbb\x69\xdc\xfc\x3b\x99\xc6\xfa\xc1\xf6\xaf\x00\x00\x00\xff\xff\x96\x2b\x34\x87\xb8\x15\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
