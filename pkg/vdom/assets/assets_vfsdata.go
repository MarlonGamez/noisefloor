// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 9, 10, 13, 29, 447868100, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 11, 1, 58, 9, 777886600, time.UTC),
			uncompressedSize: 5139,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\xdb\x38\x16\x7e\xcf\xaf\x38\xd5\x93\x82\x3a\x52\xda\xee\x2e\x0a\xdb\x2a\xb0\xed\x06\xdb\x0e\x3a\xed\xa0\x0e\xda\x06\x81\x1f\x68\xe9\x58\x62\x2a\x53\x02\x49\xdb\x31\x0a\xff\xf7\x01\x45\x59\x22\x29\x31\x17\x4c\x5e\x62\xf1\xdc\xbf\x73\xe1\x65\x5e\xc8\x4d\xf9\xee\x0c\x60\x5e\x20\xc9\xd4\x0f\x80\xb9\x48\x39\xad\x25\xc8\x43\x8d\x49\x20\xf1\x5e\xc6\x77\x64\x47\xf4\x6a\xa0\x79\x00\x76\x84\x83\xa8\xd2\x5f\x28\x67\x67\xed\xd2\x7a\xcb\x52\x49\x2b\x06\x1c\x73\x2a\x24\xf2\xab\x1d\x32\xf9\x91\xb0\xac\x44\x1e\x8a\x5d\xfe\x85\x6c\x50\xd4\x24\xc5\x09\xb0\x2a\xc3\x49\x63\x62\x02\x34\x3b\x87\xdf\xad\x0e\x68\x28\x11\xc9\xb2\x46\xf8\xb3\xd2\xc3\x90\x87\x9a\xf3\x64\x21\xc4\x9d\x34\x65\x00\x4a\x94\x80\x4a\xe2\x7f\x44\x12\x48\x20\x08\x66\x06\x55\xec\xa9\x4c\x0b\x68\xb4\xd8\x72\x00\x29\x11\x08\x41\x5a\x10\x96\x63\x30\xb5\x48\x60\xa9\xfc\x0d\xdf\x49\xb9\xc5\x29\xe0\x4e\x46\x92\xf0\x1c\x65\xb4\x53\x2b\x70\x9c\x39\x62\x2b\x8e\xe4\xd7\x6c\xcc\x4c\x49\xd3\x5f\x8e\x15\x4d\xd9\x54\x5b\x81\x59\xb5\x67\x7e\xea\xb6\xf6\xd3\x90\x49\xe4\x7e\x72\x89\x64\xe7\x46\x67\x90\x37\xd5\x80\xea\xc4\xee\xd0\x00\xde\x6f\xa5\xac\x98\xd0\x68\xac\xf4\xc7\x64\xc0\xf5\xa1\xa4\xc8\xe4\x4f\xcd\x95\xea\x0f\x1f\xd7\x8d\xc9\x75\xe3\x30\x1d\xbb\x2a\x3b\xfd\xd1\x35\x58\x35\xe5\xe6\x55\xfd\xad\x56\xd5\x3d\x24\xba\xa4\x72\x94\xef\xab\x2d\xcb\x28\xcb\xb5\xbd\x6f\x98\xca\xf0\xdc\x4d\x9d\x11\x77\xf4\x75\xbd\x16\x28\x7f\x42\x62\xba\x0f\x17\x8d\xda\xe8\xfe\x71\xc9\x1b\x4b\xf2\xe6\x24\x79\x70\x25\x8f\x6e\x6c\x83\xfa\xb1\x38\x54\xad\x67\xd5\xa6\x69\x90\x41\x6e\xae\x0f\x35\x4e\x75\x63\x59\xeb\x57\x25\x6e\x90\xc9\x4f\xd9\x14\x68\x66\x93\x94\xc7\xd3\xde\xf9\x33\x0b\xf5\xfe\x23\xad\x98\xa8\x4a\x8c\xca\x2a\x0f\x4f\xe6\x2d\xf8\xf4\x38\x88\x04\xb2\x2c\xfc\x63\xf1\xf5\x4b\x24\x24\xa7\x2c\xa7\xeb\x43\xcf\x6f\x08\x1c\xbb\xdf\xc7\xc1\x04\x49\x39\x12\x89\xad\xcf\xdf\x30\xdd\x72\x41\x77\xe8\xcc\x10\xd4\x64\x33\xf1\x0a\x1a\x95\x6d\x95\xf4\x6d\x59\xf6\xc6\x1e\xae\x96\x56\x24\xab\xd2\xad\xd2\x18\x59\xe6\xbf\x2c\x42\x0b\xae\xa0\x90\xb2\x9e\xc6\xf1\x7e\xbf\x8f\xf6\x6f\xa2\x8a\xe7\xf1\xeb\xcb\xcb\xcb\x58\xec\xf2\xc0\x06\xb6\x75\x30\x52\x56\x0d\x82\x89\x01\x60\x29\xf0\xe9\xbe\x84\xa6\x4a\x53\x4f\x5f\x1f\xeb\x8a\x43\xa8\xa6\x33\x23\x1b\x04\xca\x3a\x2f\xfe\x2b\x25\x17\xc3\xb8\x23\x81\x52\x91\xe8\x6a\x2b\x31\x54\x42\x13\x5b\xe4\x56\xad\x2d\x1f\x31\x46\x21\x81\xcb\x19\x50\x98\x77\xc2\x1f\x0a\x5a\x66\x1c\x59\x54\x22\xcb\x65\x31\x03\xfa\xf2\xa5\x6d\x5e\x25\xc5\xe5\xbe\xa5\xcb\x48\xd5\x30\x24\x09\xbc\x71\x7b\xba\xf1\x97\x32\x86\xfc\x1a\xef\x55\xed\x8f\x49\x6b\xa7\x03\xc5\x11\x2c\xad\x26\x1a\x82\x0d\x90\x2a\x49\x48\x9e\x55\x71\xa6\x39\x67\x80\xe8\xdd\xab\xae\x91\x65\x0d\x53\xd8\xe8\x3f\xb7\x7b\xf9\x99\x40\x9a\xdb\xa8\xf0\xa3\x39\xba\xeb\x5a\xce\x59\xc1\x0c\xdc\x1e\xaf\x5d\xcb\xf8\x29\x39\xe3\xac\x2d\xf0\x34\x0b\x96\x9e\x6a\xef\xe3\xe5\x28\xb7\x9c\x35\x76\xfd\x53\x20\x47\xd9\x26\xe4\xfd\xe1\x2f\x22\x8b\xb0\x26\xb2\x70\xdb\xbd\xb5\xde\x75\x7c\x47\x8c\x63\xa5\x00\x78\x55\xf5\x4c\x74\x0d\x54\x02\xde\x53\x21\xc5\x04\xf0\x3e\x2d\xb7\x6a\x43\x00\xc2\x0e\x40\xd9\x1d\xa6\x12\x33\x68\xcf\x3f\xad\x8c\x78\x30\x47\x5d\x9b\xae\xaa\xec\x10\xa5\x4f\x2a\xf9\x17\xe1\xb8\xd4\x2d\x5d\x02\x65\x42\x12\x96\x62\xb5\x86\x8f\xd7\x7f\x7e\x5e\x34\xae\xb4\x20\x9c\xbb\xed\xd0\x87\xee\x55\x68\x57\xe7\xc8\xbe\xf2\xc4\x5a\x54\xc8\xfb\xa3\xea\x1d\x39\xd5\x42\xe7\x82\x12\xbc\xa5\xcb\xa5\x59\x05\x4e\x11\xb4\x32\xfe\x3a\xe0\xcd\x01\xe5\x23\x92\x0c\x79\x8b\x85\x08\x4d\x0f\x2c\x8f\x3b\x2c\xd4\x91\xd6\x4d\x09\x5c\xc0\x2b\x15\xd1\x3b\x1d\xd9\xc5\xc5\x83\xe9\xb1\x34\x3c\x3b\x3d\xb6\x1a\x1d\x84\x1e\x0a\x5e\x03\xde\x41\xe1\x83\x86\xd4\x75\xa9\x7a\x23\x2d\xd4\x51\x59\x35\x88\xfe\x65\xfa\xa2\x36\x6e\x09\x1a\x3e\x95\x51\xb3\x7b\x3f\x31\x81\x5c\x25\xee\x95\xb9\xfa\xad\xf1\x15\x12\x78\x6d\xaf\xd6\x25\x49\xd5\xf2\x1b\x73\x59\xb5\xfd\x02\x95\x8e\x7f\xb9\xcb\x9d\x9e\x7f\x9b\x14\x35\x99\xb5\xc0\x7f\x66\x8f\x56\x9d\x0e\x27\x6a\x42\xf4\x17\xa0\x1a\x04\x0d\x33\x24\xae\x50\xd3\x04\x03\x56\x3e\xd2\x37\x33\x87\x4b\x9f\xf1\x21\x19\x9d\x43\x69\xa1\xd4\x17\x56\xc2\x54\xf5\xb4\x42\x2f\xf4\x38\x72\x4b\xa2\x33\xdc\xde\x1f\xf4\xf7\x95\xdd\x00\x76\xee\xfb\xdb\x8b\xb6\x7a\xed\xbb\xc3\xe8\x04\xbb\xa7\xf8\xf1\xde\x71\x4f\xa0\x1d\xf8\x77\x1a\xfc\xbb\x13\xf8\xd1\x95\x6f\x37\xbf\x73\x73\xd0\x03\x57\x98\xd6\xfc\x7b\xeb\x40\x16\x60\x4d\x4a\x81\xc3\x0b\x02\x78\x9c\xb9\xbd\x5b\x0e\x78\x47\x4e\xf4\x76\xbb\x99\xbb\xb3\xe5\xe9\x40\xf2\xf8\xc4\x6b\x5d\xdb\x18\x2e\xf4\xf6\xee\xf4\x54\x10\xfa\xf2\x5d\x7c\xff\xbf\x67\xbb\x1e\x20\x72\x36\xc0\x60\xe4\xb6\xa4\x6b\x6e\x2c\x69\xba\x0c\x23\xae\xe3\xd0\xd0\xb4\x9e\x4f\xda\x52\x1d\x82\x33\x76\x9a\x32\x94\x99\x30\xe3\x3f\x04\xb8\x1d\x31\x2e\xc0\x6d\x13\x59\x07\x58\x0d\x8b\xfa\x6e\xce\xc8\x13\x30\x16\x9a\xfb\xfb\xc0\x89\x87\x8c\xea\x01\xe6\xb1\xab\x5b\xcb\x6b\xfa\xc9\x86\xda\x79\xe8\xb1\x62\x1e\x77\xdd\x58\x1e\xb5\xf0\xc0\x16\xb2\x17\x90\x00\x65\x54\xfe\x58\x84\xe7\xc3\x37\x9c\x13\xc5\x48\xb0\xbe\xdf\xa9\x83\x16\xee\xe1\x07\xae\x16\xcd\x77\x18\xec\xc5\x34\x8e\xcb\x2a\x25\x65\x51\x09\x39\x7d\x7b\xf9\xf6\x32\xd6\x57\xde\xc0\xc0\xa0\xbd\x1d\x56\xac\xaa\x91\x41\xd2\xbf\xe5\xd8\x05\x69\xde\x32\x83\xd6\xa2\x92\x30\x55\x1d\x47\xb4\x6e\x50\x08\x92\xa3\xa9\xd8\x19\x93\x5d\x63\x41\x02\xcd\xf5\xb4\x26\x5c\x60\x88\x51\x46\x24\x39\xf7\xdd\x74\x83\x4e\x6c\x1a\x4c\x7a\x1d\x16\xbf\x77\x13\x7e\xd8\xe5\xb4\xac\x04\x3e\x0f\x89\x46\xc4\x03\x45\x7b\x9a\x3a\x3d\xca\x99\x69\x9f\xc7\xfa\x4c\xdb\xbc\xf4\xc5\xa7\xa7\xbe\xb9\xda\xf4\xde\xcd\xe3\xe6\xdf\xd9\x3c\xd6\x6f\x81\x7f\x07\x00\x00\xff\xff\x7c\xb3\xbf\xab\x13\x14\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
