// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 13, 7, 4, 22, 50485700, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 11, 10, 2, 12, 13, 641537200, time.UTC),
			uncompressedSize: 5675,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\xd5\x93\x82\x3a\x72\xda\x7e\x7f\x00\x89\x55\x60\xcd\x82\xb5\x6b\xd7\x0e\x4d\xd0\x36\x08\xfc\x40\x4b\x67\x8b\x89\x4c\x09\x24\x65\xc7\xe8\xf2\xbf\x0f\x24\x65\x99\xa4\x44\xc7\xd9\xfc\xd0\x46\xe4\xfd\xbe\xcf\x1d\x8f\x9c\x14\x72\x59\xbe\x3d\x02\x98\x14\x48\x72\xf5\x07\xc0\x44\x64\x9c\xd6\x12\xe4\xa6\xc6\x34\x92\xf8\x20\xc7\x77\x64\x45\xcc\x6a\x64\x68\x00\x56\x84\x83\xa8\xb2\x7b\x94\xe7\x47\xed\xd2\xbc\x61\x99\xa4\x15\x03\x8e\x0b\x2a\x24\xf2\xcb\x15\x32\xf9\x9e\xb0\xbc\x44\x1e\x8b\xd5\xe2\x33\x59\xa2\xa8\x49\x86\x23\x60\x55\x8e\x23\xad\x62\x04\x34\x3f\x86\x9f\xad\x0c\xd0\x3b\x09\xc9\x73\xcd\xfc\x49\xc9\x61\xc8\x63\x43\xb9\xd5\x10\xe3\x4a\xda\x3c\x00\xb8\x92\x49\xcd\x51\xf1\xfc\x8a\x73\xd2\x94\x32\x3e\xee\x0c\x53\xbf\x12\x25\x98\x6d\x22\x09\xa4\xf0\xf3\xf1\xdc\xda\x15\x6b\x2a\xb3\x02\xb4\x1a\x57\x30\x40\x46\x04\x42\x94\x15\x84\x2d\x30\x3a\x73\xb6\xc0\x15\x09\xdf\x48\xd9\xe0\x99\x36\x46\x12\xbe\x40\x99\xac\xd4\x0a\x38\xba\xd4\x6f\xc6\x91\xdc\x9f\x0f\xa9\x29\x69\x76\xef\x69\x31\x3b\xcb\xaa\x11\x98\x57\x6b\x16\xde\x6d\xea\xf0\x1e\x32\x89\x3c\xbc\x5d\x22\x59\xf9\xde\x59\xdb\xcb\x2a\xb0\x9b\x55\x4c\x21\x64\x89\xac\xd9\x1f\x1b\x6f\x0f\xe0\x5d\x23\x65\xc5\x84\x89\xd6\xcc\x7c\x8c\x7a\x54\x17\x25\x45\x26\x7f\x18\xaa\xcc\x7c\x84\xa8\x6e\x6c\xaa\x1b\x8f\xe8\xd1\x41\x83\xfa\xd1\x39\x38\xa0\xf4\xf3\xae\x7e\xb3\x59\xf5\x00\xa9\xc1\xe4\x02\xe5\xbb\xaa\x61\x39\x65\x0b\xa3\xef\x2b\x66\x1a\x65\x3e\x53\xe7\x77\xf2\x65\x3e\x17\x28\x7f\x40\x6a\x9b\x0f\x27\x5a\x6c\xf2\xf0\x34\xe7\x8d\xc3\x79\xb3\xe5\xdc\xf8\x9c\x8f\x87\xc2\xeb\x1e\x37\x01\x90\xdc\xe3\x66\x00\x5c\x4f\x25\xf1\x23\x6e\x4c\xd0\xef\x71\xd3\x4f\xcb\x47\xdc\x5c\x54\x39\x76\x14\xea\xa3\x9f\x16\xdb\x0d\xaf\x60\xf3\x6a\xa9\xdb\x40\x4f\xf7\xf5\xa6\xc6\x33\xd3\x3e\x9c\xf5\xcb\x12\x97\xc8\xe4\x87\xfc\x0c\x68\xee\x6e\x29\x1f\xce\x76\xee\x1c\x05\x6c\xc8\x2a\x26\xaa\x12\x93\xb2\x5a\xc4\x5b\xf5\x4e\x8e\x4d\xd3\x4b\x04\xb2\x3c\xfe\xfd\xea\xcb\xe7\x44\x48\x4e\xd9\x82\xce\x37\x3b\x7a\x8b\xe1\xb1\xfb\xfb\xb1\xd7\x27\x33\x8e\x44\x62\x6b\xf3\x57\xcc\x1a\x2e\xe8\x0a\xbd\x4e\x89\x66\xdb\x46\xa7\x0a\x8d\x82\xa4\x42\x66\x53\x96\x3b\x65\xfb\x21\xdd\xb2\xe4\x55\xd6\x28\x89\x89\xa3\xfe\xf3\x55\xec\x84\x2b\x2a\xa4\xac\xcf\xc6\xe3\xf5\x7a\x9d\xac\xdf\x24\x15\x5f\x8c\x5f\x9f\x9e\x9e\x8e\xc5\x6a\x11\xb9\x81\x6d\x0d\x4c\x94\x56\x6b\xc3\x8e\x01\x60\x29\xf0\x70\x5b\x62\x5b\xa4\x2d\x67\x87\x8f\x79\xc5\x21\x56\x67\x10\x23\x4b\x04\xca\x3a\x2b\x7e\x91\x92\x8b\xbe\xdf\x89\x40\xa9\xb6\xe8\xac\x91\x18\x2b\xa6\x91\xcb\x72\xab\xd6\xa6\x4f\x28\xa3\x90\xc2\xe9\x39\x50\x98\x74\xcc\x17\x05\x2d\x73\x8e\x2c\x29\x91\x2d\x64\x71\x0e\xf4\xe5\x4b\x57\xbd\x4a\x8a\x4f\x7d\x4b\xa7\x89\xc2\x30\xa4\x29\xbc\xf1\x1b\xcf\xd3\x8d\x49\x7b\xa4\xfa\xee\x85\x6a\xbf\xba\x3e\x86\x34\x18\xc7\xa2\x6b\x7c\x90\xd1\xd4\x6d\x07\x03\x29\xe9\x04\x53\xc6\x90\x2b\xa6\x7f\x20\xf6\xe8\x09\x15\x99\x92\x03\xe9\xb3\xa0\x6f\x2b\xf7\xda\xad\x19\x16\xea\x1a\x59\xae\x89\x62\x2d\xff\xd8\x6d\x2a\xcf\xcc\xa8\x3d\xb5\x88\x70\x5a\x07\x87\x1c\xc7\x38\xc7\x99\x9e\xd9\xc3\x45\xe4\x28\xdf\xa2\x64\x98\xb4\x4d\x03\xcd\xa3\x69\xa0\xec\x76\xfe\x72\x94\x0d\x67\x5a\x6f\xb8\x1d\x2d\x50\xb6\x09\x79\xb7\xf9\x93\xc8\x22\xae\x89\x2c\xfc\xbe\xd3\x6a\xef\x5a\x4f\xb7\x39\x1e\x2b\x01\xc0\xab\x6a\x47\x44\xe7\x40\x25\xe0\x03\x15\x52\x8c\x00\x1f\xb2\xb2\x51\xc7\x27\x10\xb6\x01\xca\xee\x30\x93\x98\x43\x3b\x6e\xb6\x3c\x62\x6f\x8e\xba\x7e\x31\xab\xf2\x4d\x92\x1d\x54\x7b\x2f\xe2\x61\xae\x5b\x3a\x05\xca\x84\x24\x2c\xc3\x6a\x0e\xef\xaf\xff\xf8\x74\xa5\x4d\x69\x83\x70\xec\xd7\xdd\xce\xf5\xa0\x40\x17\x9d\xbd\x63\xf8\x60\x2c\xaa\xc8\x87\xbd\xda\x19\xb2\xc5\x42\x67\x82\x62\xbc\xa5\xd3\xa9\x8d\x02\x0f\x04\x2d\x4f\x18\x07\x5c\x8f\x7b\xef\x91\xe4\xc8\xdb\x58\x88\xd8\xb6\xc0\xb1\xb8\x8b\x85\xba\x41\xf8\x29\x81\x13\x78\xa5\x3c\x7a\x6b\x3c\x3b\x39\xd9\x9b\x1e\x47\xc2\xb3\xd3\xe3\x8a\x31\x4e\x98\xa6\x10\x54\x10\x6c\x14\xa1\xd0\x90\xba\x2e\x55\x6d\x64\x85\xba\x99\xa8\x02\x31\x7f\xd9\xb6\xa8\x09\x42\x82\x09\x9f\xca\xa8\x5d\xbd\x1f\x98\x40\xae\x12\xf7\xca\x5e\xfd\xaa\x6d\x85\x14\x5e\xbb\xab\x75\x49\x32\xb5\xfc\xc6\x5e\x56\x65\x7f\x85\x4a\xc6\x7f\xfc\xe5\x4e\xce\x7f\xed\x1d\x7d\x29\x31\x1c\xff\xb3\xd7\x55\xff\x36\xcb\xff\x3f\x7f\x12\x8d\xc6\xcd\x44\xbb\x1e\x06\xa6\x6a\x10\x9a\x18\x52\x9f\x49\x17\x47\x8f\x94\x0f\xd4\xd3\xb9\x47\x65\x6e\x52\x90\x0e\xf6\xa7\xac\x50\xe2\x0b\x27\x91\x0a\x55\x2d\xd3\x0b\xd3\xa6\x7c\xa8\x74\x8a\xdb\x5b\x9a\xf9\xbe\x74\x0b\x03\xbc\xf3\x6c\x7b\x47\x34\x5a\xaf\x43\x37\x45\x93\x78\x7f\x8c\x1e\xae\x29\x7f\x8e\xef\x82\x7f\x67\x82\x7f\xb7\x0d\x7e\x72\x19\x1a\x37\xee\xfc\x1c\xec\x02\x57\xd8\xda\xc2\x67\x6e\x8f\x17\x60\x4e\x4a\x81\xfd\x79\x1e\x02\xc6\xdc\xde\x4d\x7b\xb4\x03\xf7\x22\xb7\x0c\xed\x53\xdb\xb1\xb4\xc7\x79\xe8\xed\xa6\x2d\x18\x3f\xf4\xee\xa9\x75\x68\x10\x76\xf0\xbd\xfa\xf6\x5b\xe0\x18\xef\x45\xe4\xa8\x17\x83\x81\x3b\xa7\xc1\xdc\x50\xd2\x0c\x0c\x13\x6e\xfc\x30\xa1\x69\x2d\x1f\xb5\x50\xed\x07\x67\x78\x90\xeb\x84\xd9\x61\xc6\x7f\x19\xe0\xb6\xf5\xf8\x01\x6e\x8b\xc8\x99\xb0\x4d\x58\xd4\xb7\x1e\xe2\x47\x60\x2d\xe8\x86\xd4\x33\x62\x9f\x52\xd3\xd8\x02\x7a\x4d\x69\x05\x55\x1f\xac\x68\xdb\x27\x03\x6a\xcc\x4b\x4e\xda\x73\xe4\x50\xf1\x6d\xbb\x0d\x48\xb7\x67\xee\x67\x6b\xd8\x73\x72\xad\x05\xa4\x40\x19\x95\xdf\xaf\xac\x07\xb1\xee\x3c\xdb\xee\x58\xf8\x69\x78\x09\x29\xac\x29\xcb\xab\x75\x52\x56\x19\x51\x84\x49\xc1\x71\xbe\x05\x66\x3c\x56\x77\x43\xf1\x97\xfa\x77\x3c\x82\x68\x2d\xa2\x63\x78\xa9\xdf\xae\x90\xc9\x68\x67\x99\xb9\x2a\xab\x51\x11\xd7\xf0\x1d\x67\x57\xfa\x3b\x6e\x78\x79\xec\x13\x25\x15\xab\x6a\x64\x90\xee\xde\xf8\xdc\x0a\xb1\xef\xe5\x51\x2b\x58\x71\x44\xf6\xc0\x3b\x20\x75\x89\x42\x90\x05\xda\x82\xbd\xbe\xdd\x55\x3a\xa4\xa0\x2f\xf4\x35\xe1\x02\x63\x4c\x72\x22\xc9\x71\xe8\x6d\x20\xea\xd8\xce\xa2\xd1\x4e\x86\x43\x1f\x9c\x16\xf6\x9b\x9c\x95\x95\xc0\xe7\x45\x42\xb3\x04\x42\xd1\x8e\x7d\xdb\xc7\x5a\x1b\x28\x93\xb1\x19\xbe\xf5\x0b\xf0\x78\xfb\x04\x3c\x51\xa7\xf0\xdb\xc9\x58\xff\x77\x34\x19\x9b\x37\xe2\xbf\x03\x00\x00\xff\xff\xb3\x8a\xe5\x6a\x2b\x16\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
