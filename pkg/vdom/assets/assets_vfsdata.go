// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 13, 7, 4, 22, 50485700, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 11, 7, 7, 23, 17, 530685100, time.UTC),
			uncompressedSize: 5593,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x18\xdb\x6e\xdb\xb8\xf2\x3d\x5f\x31\xd5\x93\x82\x3a\x52\xda\x9e\x4b\xe1\x58\x05\x4e\x73\x82\x6d\xb7\xdd\x76\xd1\x04\x6d\x83\xc0\x0f\xb4\x34\xb6\x98\xc8\xa4\x40\xd2\x76\x8c\x22\xff\xbe\xa0\x28\xcb\x24\x25\x26\xce\xae\x5f\x12\x71\xee\x57\xce\x70\x52\xaa\x65\xf5\xee\x08\x60\x52\x22\x29\xf4\x3f\x00\x13\x99\x0b\x5a\x2b\x50\xdb\x1a\xb3\x48\xe1\xbd\x4a\x6f\xc9\x9a\x98\xd3\xc8\xe0\x00\xac\x89\x00\xc9\xf3\x3b\x54\x67\x47\xed\xd1\x7c\xc5\x72\x45\x39\x03\x81\x0b\x2a\x15\x8a\x8b\x35\x32\xf5\x81\xb0\xa2\x42\x11\xcb\xf5\xe2\x0b\x59\xa2\xac\x49\x8e\x23\x60\xbc\xc0\x51\x23\x62\x04\xb4\x38\x86\x5f\x2d\x0f\x68\x20\x09\x29\x8a\x86\xf8\xb3\xe6\xc3\x50\xc4\x06\x73\x27\x21\xc6\xb5\xb2\x69\x00\x70\xad\x92\x5a\xa0\xa6\xf9\x3f\xce\xc9\xaa\x52\xf1\x71\xa7\x98\xfe\x55\xa8\xc0\x80\x89\x22\x90\xc1\xaf\x87\x33\x0b\x2a\x37\x54\xe5\x25\x34\x62\x5c\xc6\x00\x39\x91\x08\x51\x5e\x12\xb6\xc0\x68\xec\x80\xc0\x65\x09\xdf\x49\xb5\xc2\x71\xa3\x8c\x22\x62\x81\x2a\x59\xeb\x13\x70\x64\xe9\xdf\x4c\x20\xb9\x3b\x1b\x12\x53\xd1\xfc\xce\x93\x62\x20\x4b\xbe\x92\x58\xf0\x0d\x0b\x43\x57\x75\x18\x86\x4c\xa1\x08\x83\x2b\x24\x6b\xdf\x3a\x0b\xbc\xe4\x3d\xa8\x67\xbb\x07\x03\x78\xbf\x52\x8a\x33\x69\xbc\x31\x33\x1f\xa3\x1e\xd6\x79\x45\x91\xa9\x9f\x06\x2b\x37\x1f\x21\xac\x6b\x1b\xeb\xda\x43\x7a\x70\xa2\xad\x7f\x74\x0e\x4e\xd2\xf9\x71\xd5\xbf\xd9\x8c\xdf\x43\x66\x72\x6e\x81\xea\x3d\x5f\xb1\x82\xb2\x85\x91\xf7\x0d\xf3\x26\x8b\x7c\xa2\xce\xee\xe4\xeb\x7c\x2e\x51\xfd\x84\xcc\x56\x1f\x4e\x1a\xb6\xc9\xfd\xd3\x94\xd7\x0e\xe5\xf5\x8e\x72\xeb\x53\x3e\x1c\x9a\x3e\x77\xb8\x0d\x24\xc1\x1d\x6e\x07\x92\xe7\xa9\x20\x7e\xc2\xad\x71\xfa\x1d\x6e\xfb\x61\xf9\x84\xdb\x73\x5e\x60\x87\xa1\x3f\xfa\x61\xb1\xcd\xf0\x0a\xb2\xe0\xcb\xa6\xcc\x7b\xb2\xaf\xb6\x35\x8e\x4d\x7b\x70\xce\x2f\x2a\x5c\x22\x53\x1f\x8b\x31\xd0\xc2\x05\x69\x1b\xc6\x7b\x73\x8e\x02\x3a\xe4\x9c\x49\x5e\x61\x52\xf1\x45\xbc\x13\xef\xc4\xd8\x34\xb5\x44\x22\x2b\xe2\xdf\x2f\xbf\x7e\x49\xa4\x12\x94\x2d\xe8\x7c\xbb\xc7\xb7\x08\x1e\xba\xff\x1f\x7a\x7d\x30\x17\x48\x14\xb6\x3a\x7f\xc3\x7c\x25\x24\x5d\xa3\xd7\x09\xd1\x80\xed\xec\xd4\xae\xd1\x29\xa9\x33\x73\x55\x55\x7b\x61\x8f\xa7\x74\x4b\x52\xf0\x7c\xa5\x39\x26\x8e\xf8\x2f\x97\xb1\xe3\xae\xa8\x54\xaa\x1e\xa7\xe9\x66\xb3\x49\x36\x6f\x12\x2e\x16\xe9\xeb\xd3\xd3\xd3\x54\xae\x17\x91\xeb\xd8\x56\xc1\x44\x4b\xb5\x00\xb6\x0f\x00\x2b\x89\x87\xeb\x12\xdb\x2c\x6d\x3e\xfb\xfc\x98\x73\x01\xb1\xbe\x63\x18\x59\x22\x50\xd6\x69\xf1\x3f\xa5\x84\xec\xdb\x9d\x48\x54\x1a\x44\x67\x2b\x85\xb1\x26\x1a\xb9\x24\x37\xfa\x6c\xfa\x84\x30\x0a\x19\x9c\x9e\x01\x85\x49\x47\x7c\x5e\xd2\xaa\x10\xc8\x92\x0a\xd9\x42\x95\x67\x40\x5f\xbe\x74\xc5\xeb\xa0\xf8\xd8\x37\x74\x9a\xe8\x1c\x86\x2c\x83\x37\x7e\xe3\x79\xba\x31\x35\x16\xe9\x9b\xf7\x9c\x33\x65\xea\x63\x48\x82\x31\x2c\xba\xc2\x7b\x15\x4d\xdd\x76\x30\x10\x92\x8e\x31\x65\x0c\x85\x26\xfa\x1b\x6c\x8f\x9e\x10\x91\x6b\x3e\x90\x3d\x2b\xf5\x6d\xe1\x5e\xbb\x35\xc3\x40\x5d\x23\x2b\x1a\xa4\xb8\xe1\x7f\xec\x36\x95\x67\x46\xd4\x9e\x4a\x64\x38\xac\x83\x43\x8c\xa3\x9c\x63\x4c\x4f\xed\xe1\x22\x72\x84\xef\xb2\x64\x18\xb5\x0d\x03\x2d\xa2\x69\xa0\xec\xf6\xf6\x0a\x54\x2b\xc1\x1a\xb9\xe1\x76\xb4\x40\xd5\x06\xe4\xfd\xf6\x4f\xa2\xca\xb8\x26\xaa\xf4\xfb\x4e\x2b\xbd\x6b\x3d\x1d\x30\x4d\x35\x03\x10\x9c\xef\x91\xe8\x1c\xa8\x02\xbc\xa7\x52\xc9\x11\xe0\x7d\x5e\xad\xf4\xf5\x09\x84\x6d\x81\xb2\x5b\xcc\x15\x16\xd0\x8e\x93\x2d\x8d\x7c\x34\x46\x5d\xbf\x98\xf1\x62\x9b\xe4\x07\xd5\xde\x8b\x78\x98\xea\x86\x4e\x81\x32\xa9\x08\xcb\x91\xcf\xe1\xc3\xd5\x1f\x9f\x2f\x1b\x55\x5a\x27\x1c\xfb\x75\xb7\x37\x3d\xc8\xd0\xcd\xce\xde\x35\x7c\x70\x2e\x6a\xcf\x87\xad\xda\x2b\xb2\xcb\x85\x4e\x05\x4d\x78\x43\xa7\x53\x3b\x0b\xbc\x24\x68\x69\xc2\x79\x20\x9a\x71\xee\x03\x92\x02\x45\xeb\x0b\x19\xdb\x1a\x38\x1a\x77\xbe\xd0\x1b\x82\x1f\x12\x38\x81\x57\xda\xa2\x77\xc6\xb2\x93\x93\x47\xc3\xe3\x70\x78\x76\x78\x5c\x36\xc6\x08\xd3\x14\x82\x02\x82\x8d\x22\xe4\x1a\x52\xd7\x95\xae\x8d\xbc\xd4\x9b\x87\x2e\x10\xf3\x9f\xad\x8b\x9e\x20\x14\x18\xf7\xe9\x88\xda\xd5\xfb\x91\x49\x14\x3a\x70\xaf\xec\xd3\x6f\x8d\xae\x90\xc1\x6b\xf7\xb4\xae\x48\xae\x8f\xdf\xd8\xc7\xba\xec\x2f\x51\xf3\xf8\x97\x7f\xdc\xf1\xf9\xb7\x0d\x69\x96\x0e\x43\xf1\x1f\xfb\x5c\xf7\x6f\x73\xfc\xdf\xb3\x27\xb3\xd1\x98\x99\x34\xa6\x87\x13\x53\x37\x88\x06\x19\x32\x9f\xa8\x29\x8e\x1e\xaa\x18\xa8\xa7\x33\x0f\xcb\x6c\x4a\x90\x0d\xf6\xa7\xbc\xd4\xec\x4b\x27\x90\x3a\xab\x5a\xa2\x17\xa6\x4d\xf9\xa9\xd2\x09\x6e\xb7\x30\xf3\x7d\xe1\x16\x06\x78\xf7\xd9\x6e\x07\x34\x52\xaf\x42\x9b\xa0\x09\xbc\x3f\x46\x0f\xd7\x94\x3f\xc7\x77\xce\xbf\x35\xce\xbf\xdd\x39\x3f\xb9\x08\x8d\x1b\xb7\x7e\x0c\xf6\x8e\x2b\x6d\x69\xe1\x3b\xb7\x47\x0b\x30\x27\x95\xc4\xfe\x3c\x0f\x01\x65\x6e\x6e\xa7\x3d\xdc\x81\xbd\xc8\x2d\x43\xfb\xd6\x76\x34\xed\x51\x1e\xba\xdd\xb4\x05\xe3\xbb\xde\xbd\xb5\x0e\x75\xc2\x3e\x7d\x2f\xbf\xff\x16\xb8\xc6\x7b\x1e\x39\xea\xf9\x60\x60\xe7\x34\x39\x37\x14\x34\x93\x86\x89\x30\x76\x18\xd7\xb4\x9a\x8f\xda\x54\xed\x3b\x67\x78\x90\xeb\x98\xd9\x6e\xc6\x7f\xe8\xe0\xb6\xf5\xf8\x0e\x6e\x8b\xc8\x99\xb0\x8d\x5b\xf4\x77\x33\xc4\x8f\xc0\x3a\x68\x1a\x52\x4f\x89\xc7\x84\x9a\xc6\x16\x90\x6b\x4a\x2b\x28\xfa\x60\x41\xbb\x3e\x19\x10\x63\x5e\x6a\xb2\x9e\x21\x87\xb2\x6f\xdb\x6d\x80\xbb\x3d\x73\x3f\x5b\xc2\x23\x37\xd7\x46\x42\x06\x94\x51\xf5\xe3\xd2\x7a\xf0\xea\xee\xb3\x1d\xc4\xca\x1f\xb3\xdf\xea\xf9\x0e\x37\xf0\x03\x67\x97\xcd\x77\x1c\x6d\xe4\x38\x4d\x2b\x9e\x93\xaa\xe4\x52\x8d\xdf\x9e\xbe\x3d\x4d\xcd\xbb\x44\x64\xb9\xb8\xdd\x8e\x39\xe3\x35\x32\xc8\xf6\x2f\x72\x6e\xbe\xdb\x5b\x76\xd4\x4a\xd4\x14\x36\xab\x87\x01\xae\x4b\x94\x92\x2c\xd0\x66\xec\x75\xe1\xae\x6e\x21\x83\x66\x3d\xaf\x89\x90\x18\x63\x52\x10\x45\x8e\x43\x9b\x7e\xd4\x91\x8d\xa3\xd1\x9e\x87\x83\x1f\xbc\xfb\x1f\x57\x39\xaf\xb8\xc4\xe7\x79\xa2\x21\x09\xb8\xa2\x1d\xe2\x76\x4f\xab\x76\xd8\x27\xa9\x19\xa5\x9b\xf7\xda\x74\xf7\x60\x3b\xd1\x77\xea\xbb\x49\xda\xfc\x39\x9a\xa4\xe6\x45\xf7\xaf\x00\x00\x00\xff\xff\x1f\x88\x2c\x89\xd9\x15\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
