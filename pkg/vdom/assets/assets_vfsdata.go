// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 1, 5, 0, 50, 17, 49956900, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2020, 1, 5, 0, 50, 17, 43955700, time.UTC),
			uncompressedSize: 5821,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\xd5\x93\x82\x3a\x52\xda\x7e\x7f\x00\x89\x55\x60\xcd\x82\xb5\x6b\xd7\x0e\x4d\xd0\x36\x08\xfc\xc0\x48\x67\x9b\x89\x4c\x09\x24\x65\xc7\xe8\xf2\xbf\x0f\x24\x65\x99\xa4\x44\xdb\xd9\xfc\xd0\x46\xe4\xfd\xbe\xcf\x1d\x8f\x1c\xcf\xe5\xa2\x7c\x7b\x04\x30\x9e\x23\x29\xd4\x1f\x00\x63\x91\x73\x5a\x4b\x90\xeb\x1a\xb3\x48\xe2\xa3\x4c\xef\xc9\x92\x98\xd5\xc8\xd0\x00\x2c\x09\x07\x51\xe5\x0f\x28\xcf\x8f\xda\xa5\x69\xc3\x72\x49\x2b\x06\x1c\x67\x54\x48\xe4\x97\x4b\x64\xf2\x3d\x61\x45\x89\x3c\x16\xcb\xd9\x67\xb2\x40\x51\x93\x1c\x47\xc0\xaa\x02\x47\x5a\xc5\x08\x68\x71\x0c\x3f\x5b\x19\xa0\x77\x12\x52\x14\x9a\xf9\x93\x92\xc3\x90\xc7\x86\x72\xa3\x21\xc6\xa5\xb4\x79\x00\x70\x29\x93\x9a\xa3\xe2\xf9\x15\xa7\xa4\x29\x65\x7c\xdc\x19\xa6\x7e\x25\x4a\x30\xdb\x44\x12\xc8\xe0\xe7\xd3\xb9\xb5\x2b\x56\x54\xe6\x73\xd0\x6a\x5c\xc1\x00\x39\x11\x08\x51\x3e\x27\x6c\x86\xd1\x99\xb3\x05\xae\x48\xf8\x46\xca\x06\xcf\xb4\x31\x92\xf0\x19\xca\x64\xa9\x56\xc0\xd1\xa5\x7e\x77\x1c\xc9\xc3\xf9\x90\x9a\x92\xe6\x0f\x9e\x16\xb3\xb3\xa8\x1a\x81\x45\xb5\x62\xe1\xdd\xa6\x0e\xef\x21\x93\xc8\xc3\xdb\x25\x92\xa5\xef\x9d\xb5\xbd\xa8\x02\xbb\x79\xc5\x14\x42\x16\xc8\x9a\xdd\xb1\xf1\xf6\x00\xde\x35\x52\x56\x4c\x98\x68\xdd\x99\x8f\x51\x8f\xea\xa2\xa4\xc8\xe4\x0f\x43\x95\x9b\x8f\x10\xd5\x8d\x4d\x75\xe3\x11\x3d\x39\x68\x50\x3f\x3a\x05\x07\x94\x7e\xde\xd5\xef\xee\xae\x7a\x84\xcc\x60\x72\x86\xf2\x5d\xd5\xb0\x82\xb2\x99\xd1\xf7\x15\x73\x8d\x32\x9f\xa9\xf3\x3b\xf9\x32\x9d\x0a\x94\x3f\x20\xb3\xcd\x87\x13\x2d\x36\x79\xdc\xcf\x79\xe3\x70\xde\x6c\x38\xd7\x3e\xe7\xd3\xa1\xf0\x7a\xc0\x75\x00\x24\x0f\xb8\x1e\x00\xd7\xbe\x24\x7e\xc4\xb5\x09\xfa\x03\xae\xfb\x69\xf9\x88\xeb\x8b\xaa\xc0\x8e\x42\x7d\xf4\xd3\x62\xbb\xe1\x15\x6c\x51\x2d\x74\x1b\xe8\xe9\xbe\x5e\xd7\x78\x66\xda\x87\xb3\x7e\x59\xe2\x02\x99\xfc\x50\x9c\x01\x2d\xdc\x2d\xe5\xc3\xd9\xd6\x9d\xa3\x80\x0d\x69\x0a\x79\xc5\x44\x55\x62\x52\x56\xb3\x78\x63\x81\x93\x66\xd3\xf7\x12\x81\xac\x88\x7f\xbf\xfa\xf2\x39\x11\x92\x53\x36\xa3\xd3\xf5\x96\xde\x62\x78\xea\xfe\x7e\xea\xb5\xca\x9c\x23\x91\xd8\x9a\xfd\x15\xf3\x86\x0b\xba\x44\xaf\x59\xa2\xd9\xb6\x01\xaa\xa2\xa3\x50\xa9\xc0\xd9\x94\xe5\x56\xd9\x6e\x54\xb7\x2c\x45\x95\x37\x4a\x62\xe2\xa8\xff\x7c\x15\x3b\x11\x8b\xe6\x52\xd6\x67\x69\xba\x5a\xad\x92\xd5\x9b\xa4\xe2\xb3\xf4\xf5\xe9\xe9\x69\x2a\x96\xb3\xc8\x8d\x6d\x6b\x60\xa2\xb4\x5a\x1b\x76\x0c\x00\x4b\x81\x87\xdb\x12\xdb\x22\x6d\x39\x5b\x88\x4c\x2b\x0e\xb1\x3a\x86\x18\x59\x20\x50\xd6\x59\xf1\x8b\x94\x5c\xf4\xfd\x4e\x04\x4a\xb5\x45\xef\x1a\x89\xb1\x62\x1a\xb9\x2c\xb7\x6a\x6d\xb2\x47\x19\x85\x0c\x4e\xcf\x81\xc2\xb8\x63\xbe\x98\xd3\xb2\xe0\xc8\x92\x12\xd9\x4c\xce\xcf\x81\xbe\x7c\xe9\xaa\x57\x49\xf1\xa9\x6f\xe9\x24\x51\x30\x86\x2c\x83\x37\x7e\xef\xd9\xdf\x9b\xb4\x47\xaa\xf5\x5e\xa8\x0e\xac\x4b\x64\x48\x83\x71\x2c\xba\xc6\x47\x19\x4d\xdc\x8e\x30\x90\x92\x4e\x30\x65\x0c\xb9\x62\xfa\x07\x62\x8f\xf6\xa8\xc8\x95\x1c\xc8\x9e\x05\x7d\x5b\xb9\xd7\x71\xcd\xbc\x50\xd7\xc8\x0a\x4d\x14\x6b\xf9\xc7\x6e\x5f\x79\x66\x46\xed\xc1\x45\x84\xd3\x3a\x38\xe7\x38\xc6\x39\xce\xf4\xcc\x1e\x2e\x22\x47\xf9\x06\x25\xc3\xa4\x6d\x1a\x68\x11\x4d\x02\x65\xb7\xf5\x97\xa3\x6c\x38\xd3\x7a\xc3\xed\x68\x86\xb2\x4d\xc8\xbb\xf5\x9f\x44\xce\xe3\x9a\xc8\xb9\xdf\x77\x5a\xed\x5d\xeb\xe9\x36\xd3\x54\x09\x00\x5e\x55\x5b\x22\x3a\x05\x2a\x01\x1f\xa9\x90\x62\x04\xf8\x98\x97\x8d\x3a\x41\x81\xb0\x35\x50\x76\x8f\xb9\xc4\x02\xda\x89\xb3\xe5\x11\x3b\x73\xd4\xf5\x8b\xbb\xaa\x58\x27\xf9\x41\xb5\xf7\x22\x1e\xe6\xba\xa5\x13\xa0\x4c\x48\xc2\x72\xac\xa6\xf0\xfe\xfa\x8f\x4f\x57\xda\x94\x36\x08\xc7\x7e\xdd\x6d\x5d\x0f\x0a\x74\xd1\xd9\x3b\x89\x0f\xc6\xa2\x8a\x7c\xd8\xab\xad\x21\x1b\x2c\x74\x26\x28\xc6\x5b\x3a\x99\xd8\x28\xf0\x40\xd0\xf2\x84\x71\xc0\xf5\xc4\xf7\x1e\x49\x81\xbc\x8d\x85\x88\x6d\x0b\x1c\x8b\xbb\x58\xa8\x4b\x84\x9f\x12\x38\x81\x57\xca\xa3\xb7\xc6\xb3\x93\x93\x9d\xe9\x71\x24\x3c\x3b\x3d\xae\x18\xe3\x84\x69\x0a\x41\x05\xc1\x46\x11\x0a\x0d\xa9\xeb\x52\xd5\x46\x3e\x57\x97\x13\x55\x20\xe6\x2f\xdb\x16\x35\x41\x48\x30\xe1\x53\x19\xb5\xab\xf7\x03\x13\xc8\x55\xe2\x5e\xd9\xab\x5f\xb5\xad\x90\xc1\x6b\x77\xb5\x2e\x49\xae\x96\xdf\xd8\xcb\xaa\xec\xaf\x50\xc9\xf8\x8f\xbf\xdc\xc9\xf9\xaf\xbd\xa3\xef\x25\x86\xe3\x7f\xf6\xba\xea\xdf\x66\xf9\xff\xe7\x7b\xd1\x68\xdc\x4c\xb4\xeb\x61\x60\xaa\x06\xa1\x89\x21\xf3\x99\x74\x71\xf4\x48\xf9\x40\x3d\x9d\x7b\x54\xe6\x32\x05\xd9\x60\x7f\xca\xe7\x4a\xfc\xdc\x49\xa4\x42\x55\xcb\xf4\xc2\xb4\x29\x1f\x2a\x9d\xe2\xf6\xa2\x66\xbe\x2f\xdd\xc2\x00\xef\x3c\xdb\x5c\x13\x8d\xd6\xeb\xd0\x65\xd1\x24\xde\x9f\xa4\x87\x6b\xca\x1f\xe5\xbb\xe0\xdf\x9b\xe0\xdf\x6f\x82\x9f\x5c\x86\xc6\x8d\x7b\x3f\x07\xdb\xc0\xcd\x6d\x6d\xe1\x33\xb7\xc7\x0b\x30\x25\xa5\xc0\xfe\x48\x0f\x01\x63\x6e\xef\x27\x3d\xda\x81\xab\x91\x5b\x86\xf6\xa9\xed\x58\xda\xe3\x3c\xf4\x82\xd3\x16\x8c\x1f\x7a\xf7\xd4\x3a\x34\x08\x5b\xf8\x5e\x7d\xfb\x2d\x70\x8c\xf7\x22\x72\xd4\x8b\xc1\xc0\xb5\xd3\x60\x6e\x28\x69\x06\x86\x09\x37\x7e\x98\xd0\xb4\x96\x8f\x5a\xa8\xf6\x83\x33\x3c\xc8\x75\xc2\xec\x30\xe3\xbf\x0c\x70\xdb\x7a\xfc\x00\xb7\x45\xe4\x4c\xd8\x26\x2c\xea\x5b\x0f\xf1\x23\xb0\x16\x74\x43\xea\x19\xb1\x4b\xa9\x69\x6c\x01\xbd\xa6\xb4\x82\xaa\x0f\x56\xb4\xe9\x93\x01\x35\xe6\x31\x27\xeb\x39\x72\xa8\xf8\xb6\xdd\xfa\xd2\x15\x22\x86\xb1\x36\x84\x90\xd6\x16\x77\xf4\xdf\x67\x51\x10\x22\xad\x34\x7b\xde\xdf\x2b\x6b\x9f\xb7\x3b\x4e\xd1\x95\x80\x0c\x28\xa3\xf2\xfb\x95\xf5\x3e\xd7\x9d\xad\x9b\x1d\xcb\xd0\x86\x97\x90\xc1\x8a\xb2\xa2\x5a\x25\x65\x95\x13\x45\x98\xcc\x39\x4e\x37\x45\x12\xa7\xea\x9e\x2a\xfe\x52\xff\xa6\x23\x88\x56\x22\x3a\x86\x97\xfa\x29\x0d\x99\x8c\xb6\x96\x99\x6b\xbb\x1a\x5b\x71\x05\xdf\xf1\xee\x4a\x7f\xc7\x0d\x2f\x8f\x7d\xa2\xa4\x62\x55\x8d\x0c\xb2\xed\x93\xa3\x9b\x0b\xfb\x8d\x20\x6a\x05\x2b\x8e\xc8\x1e\xbe\x07\xa4\x2e\x50\x08\x32\x43\x5b\xb0\x97\xe5\x0e\x09\x90\x81\x7e\x5c\xa8\x09\x17\x18\x63\x52\x10\x49\x8e\x77\x3c\x55\x44\x1d\xe7\x59\x34\xda\x8a\x71\x58\x82\xc3\xcb\x6e\xab\xf3\xb2\x12\xf8\xbc\x60\x68\x96\x40\x34\xda\x29\x74\xf3\x7c\x6c\x63\x65\x9c\x9a\xbb\x80\x7e\x93\x4e\x37\x8f\xd2\x63\x35\x14\xbc\x1d\xa7\xfa\xbf\xa3\x71\x6a\x5e\xad\xff\x0e\x00\x00\xff\xff\xe1\x5d\x1c\x0f\xbd\x16\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
