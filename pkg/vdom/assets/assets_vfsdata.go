// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 13, 7, 4, 22, 50485700, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 11, 11, 6, 3, 48, 613146600, time.UTC),
			uncompressedSize: 5681,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\xd5\x93\x82\x3a\x52\xda\x7e\x7f\x00\x89\x55\x60\xcd\x82\xb5\x6b\xd7\x0e\x4d\xd0\x36\x08\xfc\x40\x4b\x67\x9b\x89\x4c\x09\x24\x65\xc7\xe8\xf2\xbf\x0f\x24\x65\x99\xa4\x44\xc7\xd9\xfc\xd0\x46\xe4\xfd\xbe\xcf\x1d\x8f\x1c\x2f\xe4\xb2\x7c\x7b\x04\x30\x5e\x20\x29\xd4\x1f\x00\x63\x91\x73\x5a\x4b\x90\x9b\x1a\xb3\x48\xe2\x83\x4c\xef\xc8\x8a\x98\xd5\xc8\xd0\x00\xac\x08\x07\x51\xe5\xf7\x28\xcf\x8f\xda\xa5\x59\xc3\x72\x49\x2b\x06\x1c\xe7\x54\x48\xe4\x97\x2b\x64\xf2\x3d\x61\x45\x89\x3c\x16\xab\xf9\x67\xb2\x44\x51\x93\x1c\x47\xc0\xaa\x02\x47\x5a\xc5\x08\x68\x71\x0c\x3f\x5b\x19\xa0\x77\x12\x52\x14\x9a\xf9\x93\x92\xc3\x90\xc7\x86\x72\xab\x21\xc6\x95\xb4\x79\x00\x70\x25\x93\x9a\xa3\xe2\xf9\x15\x67\xa4\x29\x65\x7c\xdc\x19\xa6\x7e\x25\x4a\x30\xdb\x44\x12\xc8\xe0\xe7\xe3\xb9\xb5\x2b\xd6\x54\xe6\x0b\xd0\x6a\x5c\xc1\x00\x39\x11\x08\x51\xbe\x20\x6c\x8e\xd1\x99\xb3\x05\xae\x48\xf8\x46\xca\x06\xcf\xb4\x31\x92\xf0\x39\xca\x64\xa5\x56\xc0\xd1\xa5\x7e\x53\x8e\xe4\xfe\x7c\x48\x4d\x49\xf3\x7b\x4f\x8b\xd9\x59\x56\x8d\xc0\xa2\x5a\xb3\xf0\x6e\x53\x87\xf7\x90\x49\xe4\xe1\xed\x12\xc9\xca\xf7\xce\xda\x5e\x56\x81\xdd\xbc\x62\x0a\x21\x4b\x64\xcd\xfe\xd8\x78\x7b\x00\xef\x1a\x29\x2b\x26\x4c\xb4\xa6\xe6\x63\xd4\xa3\xba\x28\x29\x32\xf9\xc3\x50\xe5\xe6\x23\x44\x75\x63\x53\xdd\x78\x44\x8f\x0e\x1a\xd4\x8f\xce\xc0\x01\xa5\x9f\x77\xf5\x9b\x4e\xab\x07\xc8\x0c\x26\xe7\x28\xdf\x55\x0d\x2b\x28\x9b\x1b\x7d\x5f\x31\xd7\x28\xf3\x99\x3a\xbf\x93\x2f\xb3\x99\x40\xf9\x03\x32\xdb\x7c\x38\xd1\x62\x93\x87\xa7\x39\x6f\x1c\xce\x9b\x2d\xe7\xc6\xe7\x7c\x3c\x14\x5e\xf7\xb8\x09\x80\xe4\x1e\x37\x03\xe0\x7a\x2a\x89\x1f\x71\x63\x82\x7e\x8f\x9b\x7e\x5a\x3e\xe2\xe6\xa2\x2a\xb0\xa3\x50\x1f\xfd\xb4\xd8\x6e\x78\x05\x5b\x54\x4b\xdd\x06\x7a\xba\xaf\x37\x35\x9e\x99\xf6\xe1\xac\x5f\x96\xb8\x44\x26\x3f\x14\x67\x40\x0b\x77\x4b\xf9\x70\xb6\x73\xe7\x28\x60\x43\x9a\x42\x5e\x31\x51\x95\x98\x94\xd5\x3c\xde\x5a\xe0\xa4\xd9\xf4\xbd\x44\x20\x2b\xe2\xdf\xaf\xbe\x7c\x4e\x84\xe4\x94\xcd\xe9\x6c\xb3\xa3\xb7\x18\x1e\xbb\xbf\x1f\x7b\xad\x32\xe7\x48\x24\xb6\x66\x7f\xc5\xbc\xe1\x82\xae\xd0\x6b\x96\x68\xb6\x6d\x80\xaa\xe8\x28\x54\x2a\x70\x36\x65\xb9\x53\xb6\x1f\xd5\x2d\x4b\x51\xe5\x8d\x92\x98\x38\xea\x3f\x5f\xc5\x4e\xc4\xa2\x85\x94\xf5\x59\x9a\xae\xd7\xeb\x64\xfd\x26\xa9\xf8\x3c\x7d\x7d\x7a\x7a\x9a\x8a\xd5\x3c\x72\x63\xdb\x1a\x98\x28\xad\xd6\x86\x1d\x03\xc0\x52\xe0\xe1\xb6\xc4\xb6\x48\x5b\xce\x0e\x22\xb3\x8a\x43\xac\x8e\x21\x46\x96\x08\x94\x75\x56\xfc\x22\x25\x17\x7d\xbf\x13\x81\x52\x6d\xd1\x69\x23\x31\x56\x4c\x23\x97\xe5\x56\xad\x4d\x9e\x50\x46\x21\x83\xd3\x73\xa0\x30\xee\x98\x2f\x16\xb4\x2c\x38\xb2\xa4\x44\x36\x97\x8b\x73\xa0\x2f\x5f\xba\xea\x55\x52\x7c\xea\x5b\x3a\x49\x14\x8c\x21\xcb\xe0\x8d\xdf\x7b\x9e\xee\x4d\xda\x23\xd5\x7a\x2f\x54\x07\xd6\x25\x32\xa4\xc1\x38\x16\x5d\xe3\x83\x8c\x26\x6e\x47\x18\x48\x49\x27\x98\x32\x86\x5c\x31\xfd\x03\xb1\x47\x4f\xa8\xc8\x95\x1c\xc8\x9e\x05\x7d\x5b\xb9\xd7\x71\xcd\xbc\x50\xd7\xc8\x0a\x4d\x14\x6b\xf9\xc7\x6e\x5f\x79\x66\x46\xed\xc1\x45\x84\xd3\x3a\x38\xe7\x38\xc6\x39\xce\xf4\xcc\x1e\x2e\x22\x47\xf9\x16\x25\xc3\xa4\x6d\x1a\x68\x11\x4d\x02\x65\xb7\xf3\x97\xa3\x6c\x38\xd3\x7a\xc3\xed\x68\x8e\xb2\x4d\xc8\xbb\xcd\x9f\x44\x2e\xe2\x9a\xc8\x85\xdf\x77\x5a\xed\x5d\xeb\xe9\x36\xd3\x54\x09\x00\x5e\x55\x3b\x22\x3a\x03\x2a\x01\x1f\xa8\x90\x62\x04\xf8\x90\x97\x8d\x3a\x41\x81\xb0\x0d\x50\x76\x87\xb9\xc4\x02\xda\x89\xb3\xe5\x11\x7b\x73\xd4\xf5\x8b\x69\x55\x6c\x92\xfc\xa0\xda\x7b\x11\x0f\x73\xdd\xd2\x09\x50\x26\x24\x61\x39\x56\x33\x78\x7f\xfd\xc7\xa7\x2b\x6d\x4a\x1b\x84\x63\xbf\xee\x76\xae\x07\x05\xba\xe8\xec\x9d\xc4\x07\x63\x51\x45\x3e\xec\xd5\xce\x90\x2d\x16\x3a\x13\x14\xe3\x2d\x9d\x4c\x6c\x14\x78\x20\x68\x79\xc2\x38\xe0\x7a\xe2\x7b\x8f\xa4\x40\xde\xc6\x42\xc4\xb6\x05\x8e\xc5\x5d\x2c\xd4\x25\xc2\x4f\x09\x9c\xc0\x2b\xe5\xd1\x5b\xe3\xd9\xc9\xc9\xde\xf4\x38\x12\x9e\x9d\x1e\x57\x8c\x71\xc2\x34\x85\xa0\x82\x60\xa3\x08\x85\x86\xd4\x75\xa9\x6a\x23\x5f\xa8\xcb\x89\x2a\x10\xf3\x97\x6d\x8b\x9a\x20\x24\x98\xf0\xa9\x8c\xda\xd5\xfb\x81\x09\xe4\x2a\x71\xaf\xec\xd5\xaf\xda\x56\xc8\xe0\xb5\xbb\x5a\x97\x24\x57\xcb\x6f\xec\x65\x55\xf6\x57\xa8\x64\xfc\xc7\x5f\xee\xe4\xfc\xd7\xde\xd1\xf7\x12\xc3\xf1\x3f\x7b\x5d\xf5\x6f\xb3\xfc\xff\xf3\x27\xd1\x68\xdc\x4c\xb4\xeb\x61\x60\xaa\x06\xa1\x89\x21\xf3\x99\x74\x71\xf4\x48\xf9\x40\x3d\x9d\x7b\x54\xe6\x32\x05\xd9\x60\x7f\xca\x17\x4a\xfc\xc2\x49\xa4\x42\x55\xcb\xf4\xc2\xb4\x29\x1f\x2a\x9d\xe2\xf6\xa2\x66\xbe\x2f\xdd\xc2\x00\xef\x3c\xdb\x5e\x13\x8d\xd6\xeb\xd0\x65\xd1\x24\xde\x9f\xa4\x87\x6b\xca\x1f\xe5\xbb\xe0\xdf\x99\xe0\xdf\x6d\x83\x9f\x5c\x86\xc6\x8d\x3b\x3f\x07\xbb\xc0\x2d\x6c\x6d\xe1\x33\xb7\xc7\x0b\x30\x23\xa5\xc0\xfe\x48\x0f\x01\x63\x6e\xef\x26\x3d\xda\x81\xab\x91\x5b\x86\xf6\xa9\xed\x58\xda\xe3\x3c\xf4\x82\xd3\x16\x8c\x1f\x7a\xf7\xd4\x3a\x34\x08\x3b\xf8\x5e\x7d\xfb\x2d\x70\x8c\xf7\x22\x72\xd4\x8b\xc1\xc0\xb5\xd3\x60\x6e\x28\x69\x06\x86\x09\x37\x7e\x98\xd0\xb4\x96\x8f\x5a\xa8\xf6\x83\x33\x3c\xc8\x75\xc2\xec\x30\xe3\xbf\x0c\x70\xdb\x7a\xfc\x00\xb7\x45\xe4\x4c\xd8\x26\x2c\xea\x5b\x0f\xf1\x23\xb0\x16\x74\x43\xea\x19\xb1\x4f\xa9\x69\x6c\x01\xbd\xa6\xb4\x82\xaa\x0f\x56\xb4\xed\x93\x01\x35\xe6\x31\x27\xeb\x39\x72\xa8\xf8\xb6\xdd\x06\xa4\xdb\x33\xf7\xb3\x35\xec\x39\xb9\xd6\x02\x32\xa0\x8c\xca\xef\x57\xd6\x9b\x58\x77\x9e\x6d\x77\x2c\xfc\x34\xbc\x84\x0c\xd6\x94\x15\xd5\x3a\x29\xab\x9c\x28\xc2\x64\xc1\x71\xb6\x05\x66\x9c\xaa\xbb\xa1\xf8\x4b\xfd\x9b\x8e\x20\x5a\x8b\xe8\x18\x5e\xea\xe7\x2b\x64\x32\xda\x59\x66\xae\xca\x6a\x54\xc4\x35\x7c\xc7\xe9\x95\xfe\x8e\x1b\x5e\x1e\xfb\x44\x49\xc5\xaa\x1a\x19\x64\xbb\x67\x3e\xb7\x42\xec\x7b\x79\xd4\x0a\x56\x1c\x91\x3d\xf0\x0e\x48\x5d\xa2\x10\x64\x8e\xb6\x60\xaf\x6f\x77\x95\x0e\x19\xe8\x0b\x7d\x4d\xb8\xc0\x18\x93\x82\x48\x72\xbc\xe7\x79\x20\xea\x38\xcf\xa2\xd1\x4e\x8c\xc3\x12\x1c\x18\xf6\x5b\x9d\x97\x95\xc0\xe7\x05\x43\xb3\x04\xa2\xd1\x4e\x7e\xdb\x27\x5b\x1b\x2b\xe3\xd4\xcc\xdf\xfa\x1d\x38\xdd\x3e\x04\x8f\xd5\x41\xfc\x76\x9c\xea\xff\x8e\xc6\xa9\x79\x29\xfe\x3b\x00\x00\xff\xff\x78\x93\x3a\xf3\x31\x16\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
