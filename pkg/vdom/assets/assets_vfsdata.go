// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 7, 23, 7, 53, 417874973, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 9, 1, 37, 58, 492156866, time.UTC),
			uncompressedSize: 5039,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\xdd\x8f\xd3\xb8\x16\x7f\xe7\xaf\x38\xe4\x29\x15\xbd\xc9\x5c\xb8\x77\x85\xda\x06\x69\x87\x45\x0b\x2b\x16\x56\x74\x04\x8c\x46\x7d\x70\x93\xd3\xc4\x90\xda\x91\xed\x7e\x09\xf5\x7f\x5f\x39\x4e\x13\xdb\x49\xe6\x83\x17\xa6\x3e\x9f\xfe\x9d\xdf\x39\xb6\xb3\x28\xd4\xb6\x7c\xf3\x0c\x60\x51\x20\xc9\xf4\x1f\x00\x0b\x99\x0a\x5a\x29\x50\xa7\x0a\x93\x40\xe1\x51\xc5\x3f\xc8\x9e\x98\xd5\xc0\xe8\x00\xec\x89\x00\xc9\xd3\x9f\xa8\xe6\xcf\x9a\xa5\xcd\x8e\xa5\x8a\x72\x06\x02\x73\x2a\x15\x8a\x77\x7b\x64\xea\x3d\x61\x59\x89\x22\x94\xfb\xfc\x13\xd9\xa2\xac\x48\x8a\x53\x60\x3c\xc3\x69\x1d\x62\x0a\x34\x9b\xc0\xaf\xc6\x07\xd4\x92\x88\x64\x59\x6d\xfc\x51\xfb\x61\x28\x42\xa3\x79\x89\x10\xe2\x5e\xd9\x36\x00\x25\x2a\x40\x6d\xf1\x07\x51\x04\x12\x08\x82\xb9\x25\x95\x07\xaa\xd2\x02\x6a\x2f\xae\x1d\x40\x4a\x24\x42\x90\x16\x84\xe5\x18\xcc\x1c\x11\x38\x2e\x7f\xc1\x57\x52\xee\x70\x06\xb8\x57\x91\x22\x22\x47\x15\xed\xf5\x0a\x9c\xe7\x9e\xd9\x5a\x20\xf9\x39\x1f\x0a\x53\xd2\xf4\xa7\x17\xc5\x48\xb6\x7c\x27\x31\xe3\x07\x36\x2e\xdd\x55\xe3\x32\x64\x0a\xc5\xb8\xb8\x44\xb2\xf7\x77\x67\x89\xb7\xbc\x27\xf5\xf6\xee\xc9\x00\xae\x77\x4a\x71\x26\x0d\x1a\x6b\xf3\x63\xda\xd3\x7a\x5b\x52\x64\xea\xbb\xd1\x4a\xcd\x8f\x31\xad\x5b\x5b\xeb\xd6\x53\x3a\xb7\x2c\xbb\xfc\xa3\x1b\x70\x38\xe5\xd7\x55\xff\x8b\x63\x58\xaf\xf9\x11\x12\xc3\xaa\x1c\xd5\xf5\x35\x3f\x86\x13\xbf\x5e\xd0\x53\xe3\x3b\x96\x51\x96\x9b\xcc\xbe\x60\xaa\x86\x8c\x52\xce\x24\x2f\x31\x2a\x79\x1e\x6a\x07\x03\x2a\x2d\x88\xd1\xe7\xcd\x46\xa2\xfa\x0e\x89\x8d\x05\xfc\xa7\x8e\x1c\x1d\x1f\xb6\xbc\x75\x2c\x6f\x2f\x96\x27\xdf\xf2\xec\x03\xd5\x23\xa3\xa3\xa1\x1b\x27\xe3\xdb\xba\xdb\x7a\x85\xbe\x39\x55\x38\x33\x5d\xea\xac\xbf\x2b\x71\x8b\x4c\x7d\xc8\x66\x40\x33\x57\xa4\x33\x9e\x75\xc9\xdb\x61\xed\x1c\x6c\xe8\x2e\xe1\x1d\xf8\xcc\x6c\x89\x24\xb2\x2c\xfc\x6b\xf9\xf9\x53\x24\x95\xa0\x2c\xa7\x9b\x53\xa7\x6f\x19\x9c\xdb\xbf\xcf\xbd\x71\x94\x0a\x24\x0a\x9b\x9c\xbf\x60\xba\x13\x92\xee\xd1\x1b\x48\x68\xc4\x36\x8b\x34\x34\x9a\x10\x9a\x17\xbb\xb2\xec\x82\xdd\x4f\xbd\xc6\x24\xe3\xe9\x4e\x7b\x8c\x9c\xf0\x9f\x96\xa1\x03\x57\x50\x28\x55\xcd\xe2\xf8\x70\x38\x44\x87\x57\x11\x17\x79\xfc\xf2\xea\xea\x2a\x96\xfb\x3c\x70\x81\x6d\x12\x8c\x74\x54\x4b\x60\x63\x00\x58\x4a\x7c\x7c\x2e\xa1\xed\xd2\xf6\xd3\xf1\x63\xc3\x05\x84\x7a\xd4\x33\xb2\x45\xa0\xac\xcd\xe2\x77\xa5\x84\xec\xef\x3b\x92\xa8\xb4\x88\xae\x77\x0a\x43\x6d\x34\x75\x4d\xee\xf4\xda\xea\x81\x60\x14\x12\xb8\x9a\x03\x85\x45\x6b\xfc\xb6\xa0\x65\x26\x90\x45\x25\xb2\x5c\x15\x73\xa0\x2f\x5e\xb8\xe1\x75\x51\x7c\xed\x3b\xba\x8a\x34\x87\x21\x49\xe0\x95\x3f\x20\xea\x7c\x29\x63\x28\x6e\xf0\xa8\xb9\x3f\x64\x6d\x92\x0e\xb4\x46\xb0\x72\x9a\xa8\x0f\x36\x40\xaa\x2d\x21\x79\x12\xe3\xec\x70\xde\x00\x31\x47\x61\x55\x21\xcb\x6a\xa5\xb0\xf6\x3f\x71\x7b\xf9\x89\x40\xda\x67\xb2\x1c\x47\x73\xf0\x08\x77\x92\x73\x36\xd3\x4b\x7b\x98\xbb\x4e\xf0\x4b\x71\x86\x55\x1b\xe0\x69\x16\xac\x46\xd8\xde\xed\x57\xa0\xda\x09\x56\xc7\x1d\x9f\x02\x39\xaa\xa6\x20\xd7\xa7\x7f\x88\x2a\xc2\x8a\xa8\xc2\x6f\xf7\x26\x7a\xdb\xf1\xad\x30\x8e\xb5\x03\x10\x9c\x77\x4a\x74\x03\x54\x01\x1e\xa9\x54\x72\x0a\x78\x4c\xcb\x9d\x3e\x33\x80\xb0\x13\x50\xf6\x03\x53\x85\x19\x34\x97\xa9\xc6\x46\xde\x5b\xa3\xb6\x4d\xd7\x3c\x3b\x45\xe9\xa3\x28\xff\x3c\x1c\xb6\xba\xa3\x2b\xa0\x4c\x2a\xc2\x52\xe4\x1b\x78\x7f\xf3\xf7\xc7\x65\x9d\x4a\x03\xc2\xc4\x6f\x87\x6e\xeb\xa3\x0e\x5d\x76\x0e\x9c\x2b\x8f\xe4\xa2\x46\x7e\x7c\x57\x5d\x22\x17\x2e\xb4\x29\x68\xc3\x3b\xba\x5a\xd9\x2c\xf0\x48\xd0\xd8\x8c\xf3\x40\xd4\xb7\x9d\xf7\x48\x32\x14\x0d\x16\x32\xb4\x33\xb8\xb7\x32\xfa\x9a\xfc\xf4\xca\x38\x56\x4f\xae\x8c\xeb\xc6\xe4\x6f\xcd\x83\x81\xd1\x71\xee\xe1\xd3\xc7\x81\x54\x55\xa9\x1b\x21\x2d\xf4\x25\x5b\x77\x83\xf9\xcb\x8e\xae\x4f\x69\x05\x06\x2b\x0d\x86\xdd\xaa\x1f\x98\x44\xa1\xab\xf4\x5f\x7b\xf5\x4b\x9d\x1d\x24\xf0\xd2\x5d\xad\x4a\x92\xea\xe5\x57\xf6\xb2\xee\xf1\x25\x6a\x1f\xff\xf3\x97\x5b\x3f\xff\xb7\x25\x7a\x0c\x1b\x83\xdf\xe6\x0f\x52\xcc\x6c\x27\xaa\xb7\x38\x5e\x29\xdd\xf5\xb5\x32\x24\xbe\x51\xcd\xf8\x9e\xaa\x18\x68\x92\xb9\xa7\x65\x5e\x07\x90\x0c\x0e\x9d\xb4\xd0\xee\x0b\xa7\x60\x9a\x2f\x8d\xd1\x73\x33\x7b\x7c\x12\xb4\x81\x9b\x97\x87\xf9\xfd\xce\x65\xbb\x5b\xfb\xee\xdd\x63\xa2\xde\x8c\xbd\x7e\x4c\x81\xfd\xfb\xff\x70\xa3\xf8\xd7\x4d\xbd\xdd\xc2\xd6\x19\x3f\xfe\x36\xa4\x94\x38\x35\x28\x47\x17\xb2\xfb\xfe\x5c\xb2\xdb\x87\x9f\x13\xa5\x67\x37\xf6\xe4\x6a\xa8\xe7\x6f\xce\x1d\xf6\x23\x09\xf7\xee\xe4\x1d\x41\x96\x5f\xff\x1c\x39\xfd\x5a\xbd\xcb\x16\x3d\xe9\x64\xf0\x25\x63\xaa\x3a\xf4\x86\x31\x85\x8e\x84\xd9\x87\x81\xa2\xc9\x7c\xda\x90\xa1\x07\xc6\xe0\xe5\xc4\x72\x66\xc3\x8a\x23\x80\x9e\x1f\x09\x70\xd3\xc4\x3e\xc0\x0d\x4d\x9d\xfb\xa0\x81\x45\xff\xae\xaf\x9c\x17\x2a\xd4\x0b\xf5\xdb\xfa\xd1\x55\xed\x46\xc4\x48\x5c\x43\xde\xd1\xd0\x8f\x0e\xd4\x4c\x9c\x91\x28\xf6\xed\xd1\xdf\xcb\x83\x11\xee\x19\xd2\x07\x09\x09\x50\x46\xd5\xb7\x65\x38\xe9\x7f\x5f\xb9\x48\xac\x02\x9b\xe7\x92\xbe\xb7\xe0\x01\xbe\xe1\x7a\x59\xff\x0e\x83\x83\x9c\xc5\x71\xc9\x53\x52\x16\x5c\xaa\xd9\xeb\xab\xd7\x57\xb1\x79\x41\x06\x16\x06\xcd\x63\x8b\x33\x5e\x21\x83\xa4\xfb\xce\xe2\x12\xd2\x7e\xb4\x05\x4d\x44\x6d\x61\xbb\x3a\x0f\x78\xdd\xa2\x94\x24\x47\xdb\xb1\x37\x88\xda\xc6\x82\x04\xea\xd7\x5e\x45\x84\xc4\x10\xa3\x8c\x28\x32\x19\x7b\x38\x06\xad\xd9\x2c\x98\x76\x3e\x1c\xfd\xd1\x63\xee\xfe\x94\xd3\x92\x4b\x7c\x1a\x12\xb5\xc9\x08\x14\xcd\xe5\xe4\xf2\xc1\xcc\x2e\xfb\x22\x36\x57\xc4\xfa\x2b\x5c\x7c\xf9\x0c\xb7\xd0\xc7\xca\x9b\x45\x5c\xff\xf7\x6c\x11\x9b\xef\x74\xff\x06\x00\x00\xff\xff\xda\xa0\x22\xd5\xaf\x13\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
