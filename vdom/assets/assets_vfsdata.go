// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 5, 20, 58, 9, 867694403, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 6, 2, 46, 19, 724840368, time.UTC),
			uncompressedSize: 4046,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\xea\x49\x46\x0d\xc9\x4b\x37\xa0\xb0\xad\x02\xfb\x13\xac\x1d\xba\x6c\xa8\x83\xf6\x21\xf0\x03\x43\x9d\x25\x36\x32\x29\x90\xb4\x1d\x63\xc8\x77\x1f\x28\xd2\x12\x29\x4b\x8d\xf3\x64\x99\xf7\x97\x3f\xfe\xee\x78\x5c\x96\x7a\x5b\x7d\xb8\x02\x58\x96\x48\x72\xf3\x01\xb0\x54\x54\xb2\x5a\x83\x3e\xd6\x98\x45\x1a\x9f\x74\xfa\x9d\xec\x89\x5d\x8d\xac\x0e\xc0\x9e\x48\x50\x82\x3e\xa2\x5e\x5c\xb9\xa5\xcd\x8e\x53\xcd\x04\x07\x89\x05\x53\x1a\xe5\xcd\x1e\xb9\xfe\x48\x78\x5e\xa1\x8c\xb9\xc8\x71\xda\x38\x9d\x02\xcb\x27\xf0\x9f\xb3\x02\x30\x92\x84\xe4\x79\xa3\xfe\xd9\x58\x72\x94\xb1\xd5\x3c\xf9\x8c\x71\xaf\x7d\x1b\x80\x0a\x35\xa0\xb1\xf8\x83\x68\x02\x19\x44\xd1\xc2\x93\xaa\x03\xd3\xb4\x84\xc6\x4b\x68\x07\x40\x89\x42\x88\x68\x49\x78\x81\xd1\x3c\x10\x41\xe0\x12\xf7\x3a\xd1\x44\x16\xa8\x93\x3d\xa9\x76\xb8\xe8\xe9\x3e\x48\x24\x8f\x8b\x21\xdf\x15\xa3\x8f\x3d\xd7\x56\xb2\x15\x3b\x85\xb9\x38\xf0\x71\xe9\xae\x1e\x97\x21\xd7\x28\xc7\xc5\x15\x92\xfd\xcb\x5b\x7a\xd8\x69\x2d\xb8\x4a\xb4\x58\x69\xc9\x78\x11\x4f\x5e\xdc\xd8\xf3\x55\x0f\xf9\x5c\x6c\x9b\xe3\x82\xac\x07\xee\xdd\xb1\xc6\xb9\x3d\xe6\x60\xfd\xa6\xc2\x2d\x72\xfd\x29\x9f\x03\xcb\x43\x91\x49\x6d\xde\x65\xe9\x87\xf5\x73\xa0\x82\x2b\x51\x61\x52\x89\x22\x3e\x85\x0f\x32\xb7\x74\x4c\x14\xf2\x3c\xfe\x6b\xf5\xcf\x6d\xa2\x9a\xed\xb1\xcd\xb1\xd3\xf7\x0c\x9e\xdb\xef\xe7\x33\x06\x53\x89\x44\xa3\xcb\xf9\x0b\xd2\x9d\x54\x6c\x8f\xb1\xda\x17\xb7\x64\x8b\xaa\x26\x14\xa7\x80\x56\xec\xd3\xcb\x40\x63\xe8\x0c\x19\xf0\x5d\x55\x75\xc1\xd8\x06\x02\xeb\x90\x93\xce\x24\x17\x74\x67\x3c\x26\x41\xf8\xdb\x55\x1c\xc0\x15\x95\x5a\xd7\xf3\x34\x3d\x1c\x0e\xc9\xe1\x5d\x22\x64\x91\x5e\xcf\x66\xb3\x54\xed\x8b\x28\x04\xd6\x25\x98\x98\xa8\x9e\xc0\xc7\x00\xb0\x52\x78\x79\x2e\xb1\xef\xd2\xf7\xd3\xf1\x63\x23\x24\xc4\xa6\x3b\x70\xb2\x45\x60\xbc\xcd\xe2\x57\xad\xa5\x3a\xdf\x77\xa2\x50\x1b\x11\x7b\xd8\x69\x8c\x8d\xd1\x34\x34\xb9\x37\x6b\xeb\x17\x82\x31\xc8\x60\xb6\x00\x06\xcb\xd6\xf8\xf7\x92\x55\xb9\x44\x9e\x54\xc8\x0b\x5d\x2e\x80\xbd\x7d\x1b\x86\x37\x87\xd2\xd7\xbe\x67\xeb\xc4\x70\x18\xb2\x0c\xae\xfb\x9d\xa3\xc9\x97\x71\x8e\xf2\x0e\x9f\x0c\xf7\x87\xac\x6d\xd2\x91\xd1\x88\xd6\x41\x11\x9d\x83\x0d\x40\x8d\x25\x64\xaf\x62\x9c\x1f\xae\x57\xbb\xb6\x97\xd6\x35\xf2\xbc\x51\x8a\x1b\xff\x93\xb0\x96\x5f\x09\xa4\xdf\xc6\xd5\x38\x9a\x83\x5d\xff\x2c\xb9\x61\x86\x06\x21\x4e\x47\x30\xac\xea\xe0\x65\x79\xb4\x1e\xe1\x74\xb7\x2b\x89\x7a\x27\x79\x13\x77\xbc\xd6\x0b\xd4\x0e\xf6\xdf\x8e\xff\x12\x5d\xc6\x35\xd1\x65\xbf\xa8\x5d\xf4\xb6\xae\x5b\x61\x9a\x1a\x07\x20\x85\xe8\x94\xd8\x06\x98\x06\x7c\x62\x4a\xab\x29\xe0\x13\xad\x76\x39\xe3\x05\x10\x7e\x04\xc6\xbf\x23\xd5\x98\x83\xbb\x65\x9d\x8d\xfa\xe1\x49\xb4\xc5\xf8\x20\xf2\x63\x42\x2f\x22\xf6\x9b\x78\xd8\xea\x9e\xad\x81\x71\xa5\x09\xa7\x28\x36\xf0\xf1\xee\xef\xcf\xab\x26\x15\x07\xc2\xa4\x4f\xfa\x6e\xeb\xa3\x0e\x43\x0e\x0e\xdc\x1e\x17\x32\xce\x20\x3f\xbe\xab\x2e\x91\x13\x17\xda\x14\x8c\xe1\x3d\x5b\xaf\x7d\x16\xf4\x48\xe0\x6c\xc6\x79\x40\xea\xba\x32\x04\xa0\xa5\x99\x41\x0c\x0b\xec\x97\x9f\x84\xb9\x83\x34\x7c\xe2\x0a\xa5\xc9\x63\xe6\x53\xf4\x0b\x6e\xc5\xde\xb4\xce\x9f\xc2\xd5\xba\x22\xd4\x2c\x5f\xfb\xcb\x86\xc5\x2b\x34\x3e\xde\xf5\x97\x5b\x3f\x3f\xfb\x12\xd3\x4e\xac\xc1\x2f\x8b\x17\x41\xb4\x89\x27\xcd\x66\xc6\xf1\x34\xbc\x6e\x94\x21\xeb\x1b\x35\x67\x7a\xa6\x2a\x07\x68\xb0\xe8\x69\xd9\x79\x09\xb2\xc1\xb2\xa2\xa5\x71\x5f\x06\xed\xc8\x70\xd5\x19\xbd\xb1\xd5\xd5\x27\x60\x1b\xd8\xcd\x62\xf6\xff\x4d\x78\x9e\xe1\x99\x77\x03\xa0\x8d\x7a\x37\x36\x06\xba\xe3\xe9\x8f\x4c\x61\xc9\x8f\xf4\xe6\x9e\x0d\x78\x20\xae\xbe\xfe\xd9\xb5\xed\x61\xbd\xc4\xf9\xeb\x49\x27\x01\xee\x21\x40\xfd\x1d\x74\xe0\x24\xd2\xee\xc3\xf6\x7c\x97\xf9\xd4\x01\x76\x36\xde\x0d\x5e\x44\x9e\x33\xff\xfe\x38\x0d\x39\x67\x3e\x2e\x9c\x85\x1d\xd1\xfb\x00\xbb\xa3\x0c\xee\x7e\x0b\x8b\xf9\xdf\x8c\x17\x53\xf0\x16\xbe\x9a\xf9\xfb\xe5\x39\xd5\x0b\x6a\xcb\x68\x24\xae\x6c\x84\xa3\xa1\x2f\x0e\xe4\xaa\x72\x24\x8a\x3f\x29\xf4\xf7\x72\xc1\xc8\xdd\xff\x6a\x5b\xd6\x41\x41\x06\x8c\x33\xfd\x6d\x15\x4f\xce\x9f\x5f\x27\x89\x77\xc0\x76\x34\x36\xb7\x17\x1e\xe0\x1b\x3e\xac\x9a\xff\x71\x74\x50\xf3\x34\xad\x04\x25\x55\x29\x94\x9e\xbf\x9f\xbd\x9f\xa5\xb4\x62\xc8\x75\xe4\x61\xe0\x06\x6b\xc1\x45\x8d\x1c\xb2\xee\x51\x16\x12\xd2\x1f\xd0\x23\x17\xd1\x58\xf8\xae\x9e\x07\xbc\x6e\x51\x29\x52\xa0\xef\xb8\x57\xac\x6d\x61\x41\x06\xcd\x64\x5f\x13\xa9\x30\xc6\x24\x27\x9a\x4c\xc6\x1e\x09\x51\x6b\x36\x8f\xa6\x9d\x8f\x40\x7f\xb4\xe9\xff\x38\x65\x5a\x09\x85\xaf\x43\xa2\x31\x19\x81\xc2\x5d\x51\xa7\xf7\xb4\x7f\xec\xcb\xd4\x0e\x0a\xcd\x23\x3d\x3d\xbd\xd2\x97\xa6\xf5\x7e\x58\xa6\xcd\xcf\xd5\x32\xb5\xcf\xf8\xff\x03\x00\x00\xff\xff\x31\xe1\xe1\x7c\xce\x0f\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
