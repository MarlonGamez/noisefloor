// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 4, 28, 23, 44, 12, 606480915, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 4, 29, 0, 52, 44, 499438282, time.UTC),
			uncompressedSize: 3937,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x8e\xdb\x36\x10\xbe\xef\x53\x4c\x75\x08\x64\x64\x21\x19\xe9\x25\xb0\xad\x00\x45\x1b\x34\x2d\xd2\xb4\xa8\x17\xcd\x21\xd8\x03\x97\x1c\xcb\xec\xd2\xa4\x40\x52\x72\x8c\xc2\xef\x5e\x90\x92\x6c\x52\xb2\xb2\x6b\xa0\x28\x52\xa0\x17\xff\x70\xe6\x9b\x9f\x6f\x86\x1c\x72\xb5\xb5\x3b\xf1\xe6\x06\x60\xb5\x45\xc2\xdc\x0f\x80\x95\xa1\x9a\x57\x16\xec\xa1\xc2\x22\xb1\xf8\xd9\xe6\x7f\x92\x86\xb4\xab\x49\xab\x03\xd0\x10\x0d\x46\xd1\x47\xb4\xcb\x9b\x6e\x69\x53\x4b\x6a\xb9\x92\xa0\xb1\xe4\xc6\xa2\x7e\xdb\xa0\xb4\xef\x88\x64\x02\x75\x2a\x15\xc3\x5b\x6f\xf4\x16\x38\x9b\xc1\x5f\x1d\x0a\xc0\x49\x32\xc2\x98\x57\x7f\xef\x90\x12\x75\xda\x6a\xf6\x36\x53\x6c\x6c\x88\x01\x10\x68\x01\x1d\xe2\x07\x62\x09\x14\x90\x24\xcb\x40\x6a\xf6\xdc\xd2\x2d\x78\x2b\x31\x0e\x80\x12\x83\x90\xd0\x2d\x91\x25\x26\x8b\x48\x04\x91\x49\x6c\x6c\x66\x89\x2e\xd1\x66\x0d\x11\x35\x2e\x07\xba\x0f\x1a\xc9\x63\xb8\x78\xbc\x19\x04\xc8\xd4\xce\x67\x05\xc5\x20\x86\xbb\x43\x85\x8b\x96\x8d\x68\xfd\xad\xc0\x1d\x4a\xfb\x13\x5b\x00\x67\xb1\xc8\x05\xb5\x38\xc7\x17\xba\x0d\x63\xa0\x4a\x1a\x25\x30\x13\xaa\x4c\x7b\xf7\xb3\x88\x1a\x5f\xb5\xcc\xa0\x64\xe9\xcf\xeb\x5f\x3f\x64\xc6\x6a\x2e\x4b\xbe\x39\x9c\xf5\x03\xc0\x71\xb6\x3c\x67\x95\xe7\x93\xcc\xe6\xf9\x89\xda\x9d\xaa\x0d\x32\xb5\x97\x01\xbb\x5e\x3c\x55\xeb\x00\x31\x5d\xf2\xce\xc2\x17\x88\x3d\x69\x5c\xe6\x37\x10\x4f\xd0\x1c\x68\xb4\x6c\x27\x02\x37\x36\x19\xcb\x03\xc6\x4f\x6b\x4f\x10\x7f\xd2\xbb\x92\xff\x0e\x77\x1c\x2f\x0d\xda\x6f\x58\x80\xba\xba\x8e\xfe\xba\xfa\x9f\xfc\x7f\x82\x7c\x2a\x38\x7d\x7c\x36\xf5\xad\xf6\x57\x46\xbc\x0f\x0a\xd9\x33\xb9\xff\x37\x38\x1d\x1e\xd6\x4f\x90\xda\xaa\x7f\x5d\xac\x0e\xa7\xc9\x7f\xa6\xb1\x8f\xdd\x9f\xe3\x68\xd0\x53\x8d\xc4\x62\x47\xc0\xef\x48\x6b\x6d\x78\x83\xa9\x69\xca\x0f\x64\x87\xa6\x22\x14\x6f\x01\x5b\x71\x48\xbf\x63\xdd\x95\x0e\x0a\x90\xb5\x10\x67\x6f\x7c\x03\x11\x3a\x1e\xdd\x1d\x84\x29\x5a\x3b\x8b\x59\xe4\xfe\xc3\x3a\x8d\xc6\x65\xb2\xb5\xb6\x5a\xe4\xf9\x7e\xbf\xcf\xf6\xdf\x66\x4a\x97\xf9\xab\xf9\x7c\x9e\x9b\xa6\x4c\xe2\xc1\xda\x05\x98\x39\xaf\x81\x20\x9c\x81\x80\xc2\xe0\xf3\x63\x49\x43\x93\xa1\x9d\xf3\x24\xdd\x28\x0d\xa9\xbb\x44\x49\xb2\x43\xe0\xf2\x14\xc5\x77\xd6\x6a\x33\xce\x3b\x33\x68\x9d\x88\x3f\xd4\x16\x53\x07\xba\x8d\x21\x9f\xdc\xda\xfd\x13\xce\x38\x14\x30\x5f\x02\x87\xd5\x09\xfc\xfd\x96\x0b\xa6\x51\x66\x02\x65\x69\xb7\x4b\xe0\x2f\x5f\xc6\xee\x5d\x51\x86\xda\x9f\xf8\x7d\xe6\xf6\x05\x14\x05\xbc\x1a\x5e\xb0\x7c\xbc\x5c\x4a\xd4\x77\xf8\xd9\x6d\xab\x4b\xe8\x36\xe8\xc4\x69\x24\xf7\xd1\x25\x6a\x4c\x36\x00\x75\x48\x28\xae\xea\xb8\xd0\xdd\x6c\x39\x8e\x90\x54\x15\x4a\xe6\x95\x52\x6f\x7f\x16\xdf\xe5\xae\x24\x32\xbc\xed\x9a\x69\x36\x2f\x5e\x8e\x47\xc1\x5d\xee\xd0\xc8\x45\x5f\x82\xcb\xaa\x1d\xbd\x9c\x25\xf7\x13\x3d\x7d\xce\x4a\xa3\xad\xb5\xf4\x7e\x97\x93\x7b\x9d\x54\x95\x38\xfc\x46\x2c\xdd\xa6\x95\xfb\x0c\xb3\xea\xab\x73\xda\x0d\x0f\x8a\x1d\xb2\x0d\xd7\xc6\x76\xa5\xf2\x2c\xc7\xfb\xbc\x05\xbd\x78\x01\xdf\x74\x3f\xb9\x34\x96\x48\x8a\x6a\x03\xef\xee\x7e\x79\xbf\xf6\x0f\x8e\x0e\x3f\x8b\x49\x8c\x1d\x69\xdc\xa9\x06\x2f\x17\x32\x48\xb3\xdb\xb2\x13\x2d\xe4\x93\xca\xd6\x7f\xfc\x18\x34\x52\xbb\xd6\x87\x70\x36\x1a\xbb\x0f\xfb\xc8\xf9\x98\x8d\x48\xdc\x1b\x28\x80\x4b\x6e\x3f\xae\xd3\xd9\xf8\xbd\xd4\x4b\x82\x14\xdb\xe3\xdc\x9d\x8f\xb8\x87\x8f\xf8\xb0\xf6\xff\xd3\x64\x6f\x16\x79\x2e\x14\x25\x62\xab\x8c\x5d\xbc\x9e\xbf\x9e\xe7\x54\x70\x94\x36\x09\xe2\xeb\x86\x81\x92\xaa\x42\x09\xc5\x79\x0c\xc6\x2c\x86\xb3\x25\xe9\x3c\x3a\x44\x68\xea\x78\xc1\xea\x0e\x8d\x21\x25\x86\x86\x07\x27\xb5\x27\x0e\x0a\xf0\x93\xa8\x22\xda\x60\x8a\x19\x23\x96\xcc\xa6\x9e\x2a\x6d\x4f\x85\xd2\x51\xc3\x7d\x39\x28\x2a\x94\xc1\xeb\x72\xf5\x90\x89\x64\xbb\x3d\xd1\x3f\x71\xfb\x82\xba\xcf\x55\xde\xbe\x85\xfd\xbb\x39\xef\x1f\xce\x2b\xd7\x0b\x6f\x56\xb9\xff\xba\x59\xe5\xed\xcb\xfa\xef\x00\x00\x00\xff\xff\x59\x9e\xe1\x57\x61\x0f\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
