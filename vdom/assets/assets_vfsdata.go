// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 4, 29, 1, 0, 12, 155103625, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 4, 30, 3, 49, 51, 102603386, time.UTC),
			uncompressedSize: 2618,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\xe9\xa1\x90\xd1\x40\x32\xba\x97\xc2\xb6\x0a\x0c\x5b\xb1\x6e\xe8\xb2\x61\x0e\xd6\x87\x22\x0f\x34\x75\x96\xb9\xd0\xa4\x40\x9e\xa4\x1a\x43\xbe\xfb\x40\x4a\x8a\x49\xd9\x5a\x96\x17\x47\xe1\xdd\xef\xfe\xfe\xee\xc8\xcd\x81\x8e\xf2\xc3\x0d\xc0\xe6\x80\xac\x74\x1f\x00\x1b\xcb\x8d\xa8\x09\xe8\x54\x63\x91\x10\x7e\xa3\xfc\x6f\xd6\xb2\xfe\x34\xe9\x75\x00\x5a\x66\xc0\x6a\xfe\x88\xb4\xbe\x19\x8e\xf6\x8d\xe2\x24\xb4\x02\x83\x95\xb0\x84\xe6\x63\x8b\x8a\x3e\x31\x55\x4a\x34\xa9\xd2\x25\xde\x7a\xa3\xb7\x20\xca\x05\xfc\x33\xa0\x00\x9c\x24\x63\x65\xe9\xd5\x3f\x3b\xa4\x42\x93\xf6\x9a\xa3\xcd\x14\x5b\x0a\x31\x00\x12\x09\xd0\x21\x7e\x62\xc4\xa0\x80\x24\x59\x07\x52\xdb\x09\xe2\x07\xf0\x56\x62\x1c\x00\x67\x16\x21\xe1\x07\xa6\x2a\x4c\x56\x91\x08\x22\x93\xd8\x52\x46\xcc\x54\x48\x59\xcb\x64\x83\xeb\x89\xee\xce\x20\x7b\x5c\x5f\xb3\x2d\x05\x7f\x9c\x98\xee\x25\x47\xdd\x58\x2c\x75\xa7\xe6\xa5\x4d\x3d\x2f\x43\x45\x68\xe6\xc5\x12\x59\xfb\x72\x4a\xbb\x86\x48\x2b\x9b\x91\xde\x92\x11\xaa\x4a\x17\x2f\x26\xf6\x74\x33\xa9\x7c\xa9\x8f\xbe\x5d\x50\x4c\x8a\x7b\x7f\xaa\x71\xd5\xb7\x39\x3a\xff\x28\xf1\x88\x8a\x7e\x29\x57\x20\xca\x58\xe4\x42\x5b\x9d\xa3\x0c\xdd\x86\x31\x70\xad\xac\x96\x98\x49\x5d\xa5\xa3\xfb\x28\xf2\x9e\x8e\x99\x45\x55\xa6\xbf\x6e\x7f\xbf\xcb\xac\x4f\x4f\xec\x4f\x67\xfd\x00\xf0\xf4\xfc\xfd\x74\xc1\x60\x6e\x90\x11\x0e\x31\xff\x89\xbc\x31\x56\xb4\x98\xda\xb6\xba\x63\x47\xb4\x35\xe3\x78\x0b\xd8\x8b\x43\x7a\xb9\xd2\x38\x3a\x43\x01\xaa\x91\xf2\xec\x4c\xec\x21\x42\xc7\x9c\x1c\x20\xa5\xe6\x8d\xb3\x98\x45\xee\xef\xb6\x69\x54\xae\xe4\x40\x54\xaf\xf2\xbc\xeb\xba\xac\xfb\x3e\xd3\xa6\xca\xdf\x2d\x97\xcb\xdc\xb6\x55\x12\x17\x76\x08\x30\x73\x5e\x03\x41\x58\x03\x40\x69\xf1\xff\xc7\x92\x86\x26\x43\x3b\x67\x7e\xec\xb5\x81\xd4\x6d\x07\xc5\x8e\x08\x42\x3d\x47\xf1\x03\x91\xb1\x97\x79\x67\x16\xc9\x89\xc4\xae\x21\x4c\x1d\xe8\x36\x86\x7c\x75\x67\x0f\x2f\x38\x13\x50\xc0\x72\x0d\x02\x36\xcf\xe0\x1f\x0f\x42\x96\x06\x55\x26\x51\x55\x74\x58\x83\x78\xfb\x36\x76\xef\x9a\x32\xd5\xfe\x2a\x1e\x32\xc7\x61\x28\x0a\x78\x37\xdd\x1c\x3e\x5e\xa1\x14\x9a\x7b\xfc\xe6\xb8\x7f\x0d\xdd\x07\x9d\x38\x8d\xe4\x21\x1a\xa2\xcb\x62\x03\x70\x87\x84\xe2\x55\x8c\x0b\xdd\x4d\x66\xb7\xdf\xa5\x75\x8d\xaa\xf4\x4a\xa9\xb7\xbf\x88\x67\xf9\x95\x85\x0c\xd7\xb8\x9d\xaf\xe6\xd5\xad\x7f\x11\xdc\x75\x86\x46\x2e\xc6\x16\x5c\x57\x1d\xca\x2b\xca\xe4\x61\x86\xd3\xe7\xac\x0c\x52\x63\x94\xf7\x3b\x3f\xeb\xac\xae\xe5\xe9\x0f\x46\xfc\x90\xd6\xee\x37\xcc\x6a\xec\xce\xf3\x34\xec\x74\x79\xca\xf6\xc2\x58\x1a\x5a\xe5\xab\x1c\xcf\x79\x0f\x7a\xf3\x06\xbe\x1b\x3e\x85\xb2\xc4\x14\x47\xbd\x87\x4f\xf7\xbf\x7d\xde\xfa\x9b\x74\xc0\x2f\xe2\x22\xc6\x8e\x0c\x1e\x75\x8b\xd7\x1b\x19\xa4\x39\x8c\xec\x0c\x85\x7c\x52\xd9\xf6\xaf\x9f\x03\x22\xf5\x67\x63\x08\x67\xa3\xb1\xfb\x90\x47\xce\xc7\xe5\xc2\xec\x2c\x14\x20\x94\xa0\x2f\x5b\x77\x8b\x4c\x4b\x3b\x4a\x82\x14\xfb\x25\xed\xf6\x23\x76\xf0\x05\x77\x5b\xff\x7f\x9a\x74\x76\x95\xe7\x52\x73\x26\x0f\xda\xd2\xea\xfd\xf2\xfd\x32\xe7\x52\xa0\xa2\x24\x88\x6f\x58\xf1\x5a\xe9\x1a\x15\x14\xe7\xe7\x41\x5c\xc5\xf0\xaa\x48\x06\x8f\x0e\x11\x9a\x7a\xba\x62\xf5\x88\xd6\xb2\x0a\x43\xc3\x93\x4d\xed\x0b\x07\x05\xf8\xfb\xa5\x66\xc6\x62\x8a\x59\xc9\x88\x2d\xe6\xae\xaa\x9e\x53\xa1\xf4\x82\x70\xff\x1d\x14\x97\xda\xe2\xeb\x72\xf5\x90\x99\x64\x87\x99\x18\xdf\x6e\x63\x43\xdd\xef\x26\xef\x1f\x79\xfe\x41\x98\x8f\x2f\xc2\x8d\xe3\xc2\x87\x4d\xee\xff\xdc\x6c\xf2\xfe\xc9\xf8\x6f\x00\x00\x00\xff\xff\x6e\xe7\x10\x6e\x3a\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
