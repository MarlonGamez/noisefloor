// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 4, 30, 7, 43, 10, 135589400, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 5, 4, 31, 41, 392113100, time.UTC),
			uncompressedSize: 3102,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\xe9\xa1\x90\xd1\x40\xf2\xd2\x3d\x14\xb6\x55\x60\xd8\x8a\xb5\x43\x97\x0d\x75\xb0\x3e\x14\x79\xa0\xa9\xb3\xcc\x85\x26\x05\xf2\x24\xc7\x18\xf2\xdd\x07\xea\x8f\x45\xca\x56\xb2\xe4\x25\x0a\xef\xdf\x8f\x77\xbf\xbb\x63\x56\x3b\xda\xcb\x0f\x57\x00\xab\x1d\xb2\xdc\x7d\x00\xac\x2c\x37\xa2\x24\xa0\x63\x89\x59\x44\xf8\x48\xe9\x3f\xac\x66\xed\x69\xd4\xea\x00\xd4\xcc\x80\xd5\xfc\x01\x69\x79\xd5\x1d\x6d\x2b\xc5\x49\x68\x05\x06\x0b\x61\x09\xcd\xc7\x1a\x15\x7d\x62\x2a\x97\x68\x62\xa5\x73\xbc\x6e\x9c\x5e\x83\xc8\x67\xf0\x6f\x67\x05\xe0\x24\x09\xcb\xf3\x46\xfd\x8b\xb3\x54\x68\xe2\x56\xb3\xf7\x19\x63\x4d\xbe\x0d\x80\x44\x02\x74\x16\xbf\x32\x62\x90\x41\x14\x2d\x3d\xa9\x3d\x08\xe2\x3b\x68\xbc\x84\x76\x00\x9c\x59\x84\x88\xef\x98\x2a\x30\x5a\x04\x22\x08\x5c\x62\x4d\x09\x31\x53\x20\x25\x35\x93\x15\x2e\x47\xba\x1b\x83\xec\x61\x79\xc9\xb7\x14\xfc\x61\xe4\xba\x95\xec\x75\x65\x31\xd7\x07\x35\x2d\xad\xca\x69\x19\x2a\x42\x33\x2d\x96\xc8\xea\x97\xaf\xb4\xa9\x88\xb4\xb2\x09\xe9\x35\x19\xa1\x8a\x78\xf6\xe2\xc5\x9e\xae\x46\x99\xcf\xf5\xbe\x29\x17\x64\xa3\xe4\xde\x1d\x4b\x5c\xb4\x65\x0e\xce\x3f\x4a\xdc\xa3\xa2\xcf\xf9\x02\x44\x1e\x8a\x1c\xb4\xc5\x80\xd2\x0f\xeb\x63\xe0\x5a\x59\x2d\x31\x91\xba\x88\xfb\xf0\x01\xf2\x96\x8e\x89\x45\x95\xc7\xbf\xaf\xff\xbc\x4d\x6c\x73\x3d\xb1\x3d\x0e\xfa\x9e\xc1\xd3\xe9\xfb\xe9\x8c\xc1\xdc\x20\x23\xec\x30\x7f\x45\x5e\x19\x2b\x6a\x8c\x6d\x5d\xdc\xb2\x3d\xda\x92\x71\xbc\x06\x6c\xc5\x3e\xbd\x5c\x6a\x1c\x9d\x21\x03\x55\x49\x39\x04\x13\x5b\x08\xac\x43\x4e\x76\x26\xb9\xe6\x95\xf3\x98\x04\xe1\x6f\xd7\x71\x90\xae\x68\x47\x54\x2e\xd2\xf4\x70\x38\x24\x87\x77\x89\x36\x45\x7a\x33\x9f\xcf\x53\x5b\x17\x51\x98\xd8\x0e\x60\xe2\xa2\x7a\x02\x3f\x07\x80\xd2\xe2\xff\xc7\x12\xfb\x2e\x7d\x3f\x03\x3f\xb6\xda\x40\xec\xa6\x83\x62\x7b\x04\xa1\x4e\x28\x7e\x26\x32\xf6\xfc\xde\x89\x45\x72\x22\xb1\xa9\x08\x63\x67\x74\x1d\x9a\x7c\x77\x67\xf7\x2f\x04\x13\x90\xc1\x7c\x09\x02\x56\x27\xe3\x5f\x76\x42\xe6\x06\x55\x22\x51\x15\xb4\x5b\x82\x78\xfb\x36\x0c\xef\x8a\x32\xd6\xfe\x2e\xee\x13\xc7\x61\xc8\x32\xb8\x19\x4f\x8e\x06\xaf\x50\x0a\xcd\x1d\x3e\x3a\xee\x5f\xb2\x6e\x41\x47\x4e\x23\xba\x0f\x9a\xe8\x3c\xd9\x00\xdc\x59\x42\xf6\x2a\xc6\xf9\xe1\x46\xbd\xdb\xce\xd2\xb2\x44\x95\x37\x4a\x71\xe3\x7f\x16\xf6\xf2\x2b\x13\xe9\x8f\x71\x3b\x9d\xcd\x8b\x53\xff\x0c\xdc\x65\x86\x06\x21\xfa\x12\x5c\x56\xed\xd2\x2b\xf2\xe8\x7e\x82\xd3\xc3\xad\x0c\x52\x65\x54\x13\x77\xba\xd7\x59\x59\xca\xe3\x5f\x8c\xf8\xce\xed\x9e\xb8\xec\xbf\xfc\xdb\xb9\xd9\x43\xf0\x59\x59\x34\xae\xec\x73\x1f\xda\x57\xdc\xeb\xda\xb5\xcc\x8f\xe1\x69\x29\x19\x77\xc7\x37\xfe\xb1\x43\xbf\x46\xe7\xe3\xdd\xf8\xf8\xe4\xe7\xa7\xe5\xf3\x75\x39\x21\x4c\x1a\xd4\xd3\x15\xe9\x97\xe0\xc8\xa0\xcf\xef\xc5\xbd\xd8\xe1\x1e\xef\x90\x9e\xa6\xa7\xb1\xb0\xd1\xf9\x31\xd9\x0a\x63\xa9\xe3\x6c\x43\xb7\xf1\x22\x71\x1d\xd6\x9a\xbe\x79\x03\x3f\x74\x9f\x42\x59\x62\x8a\xa3\xde\xc2\xa7\xbb\x3f\xbe\xac\x9b\x87\x45\xe7\x65\x36\x06\xe5\x7e\xc2\xa0\xa6\xc9\xd3\x14\xbb\x61\xbc\xad\x60\x98\x69\x13\x3d\x76\x16\x6f\xc8\xd7\xfa\xef\xdf\x86\xf6\x7b\x46\xef\x94\xd7\xce\xf9\x48\xf5\x0c\x61\x78\x23\xbf\x5f\x1d\xd4\x97\xf7\x71\x57\xac\x8e\x4d\x67\xc5\xf2\x36\x65\xc4\x88\x0c\x58\xa4\x68\x72\x08\x8c\x92\x76\xb0\x90\x81\x50\x82\xbe\xad\xdd\xcb\x60\xdc\x2e\xbd\xc4\xab\x53\xbb\x78\xdd\xce\xc3\x03\x7c\xc3\xcd\xba\xf9\x3b\x8e\x0e\x76\x91\xa6\x52\x73\x26\x77\xda\xd2\xe2\xfd\xfc\xfd\x3c\xe5\x52\xa0\x0a\xc0\x74\x6b\x5b\x2b\x5d\xa2\x82\x6c\x78\xf2\x85\x54\x08\x2e\xd5\x45\x74\x16\xbe\xab\xa7\x0b\x5e\xf7\x68\x2d\x2b\xd0\x77\x3c\x62\xfe\xa9\x8c\x90\x41\xf3\x6e\x28\x99\xb1\x18\x63\x92\x33\x62\xb3\xa9\x27\xc8\x30\x27\x7c\x8d\xc9\x61\xf2\x3c\x48\x2e\xb5\xc5\xd7\xdd\xbd\x31\x99\xb8\x7c\x37\xf7\xfa\xf7\xb9\x5f\xe8\x55\xda\x3e\xe4\x9b\x47\x7f\xda\xbf\xfa\x57\x8e\x87\x1f\x56\x69\xf3\xeb\x6a\x95\xb6\xff\x16\xfc\x17\x00\x00\xff\xff\x03\x3f\x5e\x83\x1e\x0c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
