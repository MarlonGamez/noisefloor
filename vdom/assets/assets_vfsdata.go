// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 4, 26, 1, 6, 45, 96533831, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 4, 26, 4, 12, 59, 339188110, time.UTC),
			uncompressedSize: 3495,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\xa6\x3a\x04\x32\x62\x48\xee\xa6\x05\x02\xdb\x0a\x50\x6c\x82\xa6\x6d\xb2\x2d\xea\x4d\x73\x08\xf6\xc0\x15\xc7\x36\xbb\x34\x29\x90\x63\x29\x46\xe1\x77\x2f\x48\x49\x36\x25\xdb\x5d\xef\xa1\xc0\x1e\xe2\x83\x25\xcd\xff\x7c\x33\xc3\x9f\xd9\x8a\xd6\xf2\xcd\x00\x60\xb6\x42\xc6\xdd\x0b\xc0\xcc\xe6\x46\x14\x04\xb4\x2d\x30\x8b\x08\xbf\x52\xfa\x37\x2b\x59\x4d\x8d\x6a\x19\x80\x5c\x2b\x4b\x70\x2d\x45\xfe\x00\x19\x8c\x47\x0d\x19\xe0\xa3\xde\x58\x7c\xab\x2b\x05\x19\x7c\xdf\x23\x7f\x2a\x20\x83\xab\x03\xf1\x37\xdc\x36\x92\xaf\x3a\x44\x2f\xf7\xc3\x81\x74\xbd\x62\x6a\x89\x90\xc1\x8f\xd3\x41\x43\x2c\x99\x01\xab\xf3\x07\xa4\x3d\x69\xb1\x51\x39\x09\xad\xc0\xe0\x52\x58\x42\xf3\xae\x44\x45\xef\x99\xe2\x12\x4d\xac\x34\xc7\x91\x4f\x6a\x04\x82\x0f\xe1\x9f\xbd\x75\x5b\x09\xca\x57\x10\x3b\x5e\x48\x07\xc8\x99\xc5\x43\x42\x93\x80\x03\xe0\xec\x25\x8c\x73\xef\xe4\x83\xf3\xa7\xd0\xc4\xd1\xda\x49\x73\x5d\xa9\x68\xb4\x0f\x28\xc6\x92\xba\x86\xdd\x4f\x22\x01\xd7\x6b\xaf\x0f\xd9\x11\x1b\xe0\x76\x5b\xe0\xa4\x8e\xf8\x88\xf7\x4e\xe2\x1a\x15\xfd\xc2\x27\x20\xf8\x31\xfb\x2d\x23\x36\x81\x48\xe2\x82\xa2\x1e\x73\x37\xed\x11\x5c\x25\xb5\xc4\x44\xea\x65\xdc\xc6\x33\xec\x0b\xd5\x50\x27\x16\x15\x8f\x7f\x9d\xff\x7e\x93\x58\x32\x42\x2d\xc5\x62\x7b\xd0\xe9\x29\xed\x7a\xdf\xf7\x06\xd9\xc3\xf4\x24\xba\x9f\x8a\xcb\xb1\xdd\x14\xdf\x90\xbd\x08\x59\x3f\x9b\x17\xe1\x9a\x3b\xc9\xe7\x80\xaa\x0f\x04\xf9\xa3\xc0\xfe\x7f\x98\xf9\x85\xe6\x32\xd0\xbc\xe8\x33\x40\x0d\x4b\x4a\x88\x99\x25\x52\x52\x32\xb9\xc1\x67\xda\x95\xbb\x41\xfb\xec\x2f\xd7\xb9\x41\x46\xd8\xe4\xfa\x27\xe6\x1b\x63\x45\x89\xb1\x2d\x97\x37\x6c\x8d\xb6\x60\x39\x8e\x00\x6b\x76\x08\xb0\x83\xd6\x15\x07\x32\x50\x1b\x29\x0f\xae\xc4\x02\x3a\xda\xdd\xaa\x34\x2a\x5c\xe7\x1b\x67\x31\xe9\xb8\xbf\x99\xc7\x9d\x24\xa2\x15\x51\x31\x49\xd3\xaa\xaa\x92\xea\x55\xa2\xcd\x32\xbd\x1a\x8f\xc7\xa9\x2d\x97\x51\xb7\x20\x4d\x80\x89\xf3\x1a\x30\x02\x50\x76\x80\xd2\xe2\xe5\xb1\xc4\xa1\xc9\xd0\xce\x60\xff\xba\xd0\x06\x62\xb7\x15\x2a\xb6\x46\x10\x6a\x1f\xc5\x4f\x44\xc6\x1e\xe7\x9d\x58\x24\xc7\x12\xf7\x1b\xc2\xd8\x29\x8d\xba\x2a\x5f\x1c\xed\xee\x11\x67\xc2\xed\xf8\x53\x10\x30\xdb\x2b\x5f\xaf\x84\xe4\x06\x55\x22\x51\x2d\x69\x35\x05\xf1\xf2\x65\xd7\xbd\x2b\x4a\x5f\xfa\x8b\xb8\x4b\x5c\xff\x43\x96\xc1\x55\x7f\x76\x7c\xbc\x42\x29\x34\xb7\xf8\xd5\xcd\xce\x29\xed\x3a\xe8\xc8\x49\x44\x77\x61\xff\x9d\x00\x1b\x20\x77\x9a\x90\x3d\xa9\xe3\x42\x77\xbd\x0e\xaf\x57\x86\xa2\x40\xc5\xbd\x50\xec\xed\x77\x84\x76\x4f\x05\x32\x3c\xb3\xd8\xf3\x68\x9e\x3c\xe2\x1c\x05\x77\xba\x43\x3b\x2e\xda\x12\x9c\x16\x6d\xe0\x15\x3c\xba\x3b\xd3\xd3\x87\xac\x0c\xd2\xc6\x28\xef\x77\x7a\x76\xd6\x59\x51\xc8\xed\x1f\x8c\xf2\x55\x5c\xb8\xff\x30\xab\xb6\x3a\xfb\x69\xb8\xd7\x7c\x9b\x2c\x84\xb1\xd4\x94\xca\xa3\xdc\x9d\xf3\x5a\xe9\xc5\x0b\xf8\xae\x79\x15\xca\x12\x53\x39\xea\x05\xbc\xbf\xfd\xf8\x61\xee\x8f\xad\x8d\xfe\xb0\x0b\x62\xd7\x91\xc1\xb5\x2e\xf1\x74\x21\x83\x34\x9b\x91\x3d\xd3\x42\x3e\xa9\x64\xfe\xd7\xcf\x41\x23\xd5\xb4\x36\x84\x83\xd1\xae\xfb\xb0\x8f\x9c\x8f\xe1\x11\x88\x95\x85\x0c\x84\x12\xf4\x79\x1e\x0f\x8f\x4f\xbd\x2d\x27\x3c\xd9\xfa\x55\xdc\xad\x8f\x58\xc1\x67\xbc\x9f\xfb\xef\x38\xaa\xec\x24\x4d\xa5\xce\x99\x5c\x69\x4b\x93\xd7\xe3\xd7\xe3\x34\x97\x02\x15\x45\x41\x7c\xcd\x1e\xa0\x95\x2e\xd0\x9d\xd1\xf7\x1b\x5d\xef\x90\x1c\xec\x27\x51\xe3\xd1\x69\x84\xa6\x76\x27\xac\xae\xd1\x5a\xe6\x4f\xf5\x87\x1d\xb4\x6b\xd9\x03\x07\x19\xf8\x0d\xa8\x60\xc6\x62\x8c\x09\x67\xc4\x3a\x23\x16\xfa\xaf\x7b\x2a\xe4\x1e\x35\xdc\x7f\x07\x95\x4b\x6d\xf1\x69\xb9\x7a\x95\x33\xc9\x36\x33\xd1\x5e\x54\xda\x82\xba\xff\x59\x5a\xdf\xa8\xfc\xed\x2b\x6d\xaf\x5f\x33\xd7\x0b\x6f\x66\xa9\x7f\x0c\x66\x69\x7d\x3f\xfb\x37\x00\x00\xff\xff\xd8\x88\x8f\x43\xa7\x0d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
